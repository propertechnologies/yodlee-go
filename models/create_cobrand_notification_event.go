// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCobrandNotificationEvent CreateCobrandNotificationEvent
// swagger:model CreateCobrandNotificationEvent
type CreateCobrandNotificationEvent struct {

	// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>
	CallbackURL string `json:"callbackUrl,omitempty"`

	// Name of the event for which the customers must subscribe to receive notifications.<br><b>Valid Value:</b> Notification Events Name<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul><b>Applicable Values</b><br>
	// * REFRESH: Events that happen during add, edit and update aggregated accounts processes.<br>
	// * DATA_UPDATES: Data updates that happen on provider accounts, accounts, transactions and holdings data due to user actions or auto updates. This event is triggered to help the customer perform data extracts from Yodlee system to their system.<br>
	// * AUTO_REFRESH_UPDATES: Events that gets triggered once there is a change in the state of cache refresh.<br>
	// Enum: [REFRESH DATA_UPDATES AUTO_REFRESH_UPDATES]
	Name string `json:"name,omitempty"`
}

// Validate validates this create cobrand notification event
func (m *CreateCobrandNotificationEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createCobrandNotificationEventTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REFRESH","DATA_UPDATES","AUTO_REFRESH_UPDATES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createCobrandNotificationEventTypeNamePropEnum = append(createCobrandNotificationEventTypeNamePropEnum, v)
	}
}

const (

	// CreateCobrandNotificationEventNameREFRESH captures enum value "REFRESH"
	CreateCobrandNotificationEventNameREFRESH string = "REFRESH"

	// CreateCobrandNotificationEventNameDATAUPDATES captures enum value "DATA_UPDATES"
	CreateCobrandNotificationEventNameDATAUPDATES string = "DATA_UPDATES"

	// CreateCobrandNotificationEventNameAUTOREFRESHUPDATES captures enum value "AUTO_REFRESH_UPDATES"
	CreateCobrandNotificationEventNameAUTOREFRESHUPDATES string = "AUTO_REFRESH_UPDATES"
)

// prop value enum
func (m *CreateCobrandNotificationEvent) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createCobrandNotificationEventTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateCobrandNotificationEvent) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateCobrandNotificationEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateCobrandNotificationEvent) UnmarshalBinary(b []byte) error {
	var res CreateCobrandNotificationEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
