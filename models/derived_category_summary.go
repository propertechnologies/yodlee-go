// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DerivedCategorySummary DerivedCategorySummary
// swagger:model DerivedCategorySummary
type DerivedCategorySummary struct {

	// Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	CategoryID int64 `json:"categoryId,omitempty"`

	// The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	CategoryName string `json:"categoryName,omitempty"`

	// The total of credit transactions for the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	CreditTotal *Money `json:"creditTotal,omitempty"`

	// The total of debit transactions for the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	DebitTotal *Money `json:"debitTotal,omitempty"`

	// Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	Details []*DerivedCategorySummaryDetails `json:"details"`

	// Link of the API services that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	Links *DerivedTransactionsLinks `json:"links,omitempty"`
}

// Validate validates this derived category summary
func (m *DerivedCategorySummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebitTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedCategorySummary) validateCreditTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditTotal) { // not required
		return nil
	}

	if m.CreditTotal != nil {
		if err := m.CreditTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creditTotal")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedCategorySummary) validateDebitTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.DebitTotal) { // not required
		return nil
	}

	if m.DebitTotal != nil {
		if err := m.DebitTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debitTotal")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedCategorySummary) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DerivedCategorySummary) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DerivedCategorySummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DerivedCategorySummary) UnmarshalBinary(b []byte) error {
	var res DerivedCategorySummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
