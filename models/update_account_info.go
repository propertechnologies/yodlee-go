// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UpdateAccountInfo UpdateAccountInfo
// swagger:model UpdateAccountInfo
type UpdateAccountInfo struct {

	// account name
	AccountName string `json:"accountName,omitempty"`

	// account number
	AccountNumber string `json:"accountNumber,omitempty"`

	// account status
	AccountStatus string `json:"accountStatus,omitempty"`

	// amount due
	AmountDue *Money `json:"amountDue,omitempty"`

	// balance
	Balance *Money `json:"balance,omitempty"`

	// due date
	DueDate string `json:"dueDate,omitempty"`

	// home value
	HomeValue *Money `json:"homeValue,omitempty"`

	// include in net worth
	IncludeInNetWorth bool `json:"includeInNetWorth,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`
}

// Validate validates this update account info
func (m *UpdateAccountInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountDue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomeValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAccountInfo) validateAmountDue(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountDue) { // not required
		return nil
	}

	if m.AmountDue != nil {
		if err := m.AmountDue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amountDue")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAccountInfo) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAccountInfo) validateHomeValue(formats strfmt.Registry) error {

	if swag.IsZero(m.HomeValue) { // not required
		return nil
	}

	if m.HomeValue != nil {
		if err := m.HomeValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("homeValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAccountInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAccountInfo) UnmarshalBinary(b []byte) error {
	var res UpdateAccountInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
