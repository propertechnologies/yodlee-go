// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DerivedTransactionsSummary DerivedTransactionsSummary
// swagger:model DerivedTransactionsSummary
type DerivedTransactionsSummary struct {

	// Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	CategorySummary []*DerivedCategorySummary `json:"categorySummary"`

	// Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>
	// * TRANSFER: The transaction category belongs to a transfer category type.<br>
	// * DEFERRED_COMPENSATION: The transaction category belongs to deferred compensation type.<br>
	// * UNCATEGORIZE: The transaction does not seem to be categorized.<br>
	// * INCOME: The transaction category belongs to an income type.<br>
	// * EXPENSE: The transaction category belongs to an expense type.<br>
	// Read Only: true
	// Enum: [TRANSFER DEFERRED_COMPENSATION UNCATEGORIZE INCOME EXPENSE]
	CategoryType string `json:"categoryType,omitempty"`

	// The total of credit transactions for the category type.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	CreditTotal *Money `json:"creditTotal,omitempty"`

	// The total of debit transactions for the category type.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	DebitTotal *Money `json:"debitTotal,omitempty"`

	// Link of the API services that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
	// Read Only: true
	Links *DerivedTransactionsLinks `json:"links,omitempty"`
}

// Validate validates this derived transactions summary
func (m *DerivedTransactionsSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategorySummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebitTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedTransactionsSummary) validateCategorySummary(formats strfmt.Registry) error {

	if swag.IsZero(m.CategorySummary) { // not required
		return nil
	}

	for i := 0; i < len(m.CategorySummary); i++ {
		if swag.IsZero(m.CategorySummary[i]) { // not required
			continue
		}

		if m.CategorySummary[i] != nil {
			if err := m.CategorySummary[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categorySummary" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var derivedTransactionsSummaryTypeCategoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TRANSFER","DEFERRED_COMPENSATION","UNCATEGORIZE","INCOME","EXPENSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		derivedTransactionsSummaryTypeCategoryTypePropEnum = append(derivedTransactionsSummaryTypeCategoryTypePropEnum, v)
	}
}

const (

	// DerivedTransactionsSummaryCategoryTypeTRANSFER captures enum value "TRANSFER"
	DerivedTransactionsSummaryCategoryTypeTRANSFER string = "TRANSFER"

	// DerivedTransactionsSummaryCategoryTypeDEFERREDCOMPENSATION captures enum value "DEFERRED_COMPENSATION"
	DerivedTransactionsSummaryCategoryTypeDEFERREDCOMPENSATION string = "DEFERRED_COMPENSATION"

	// DerivedTransactionsSummaryCategoryTypeUNCATEGORIZE captures enum value "UNCATEGORIZE"
	DerivedTransactionsSummaryCategoryTypeUNCATEGORIZE string = "UNCATEGORIZE"

	// DerivedTransactionsSummaryCategoryTypeINCOME captures enum value "INCOME"
	DerivedTransactionsSummaryCategoryTypeINCOME string = "INCOME"

	// DerivedTransactionsSummaryCategoryTypeEXPENSE captures enum value "EXPENSE"
	DerivedTransactionsSummaryCategoryTypeEXPENSE string = "EXPENSE"
)

// prop value enum
func (m *DerivedTransactionsSummary) validateCategoryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, derivedTransactionsSummaryTypeCategoryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DerivedTransactionsSummary) validateCategoryType(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryTypeEnum("categoryType", "body", m.CategoryType); err != nil {
		return err
	}

	return nil
}

func (m *DerivedTransactionsSummary) validateCreditTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditTotal) { // not required
		return nil
	}

	if m.CreditTotal != nil {
		if err := m.CreditTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creditTotal")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedTransactionsSummary) validateDebitTotal(formats strfmt.Registry) error {

	if swag.IsZero(m.DebitTotal) { // not required
		return nil
	}

	if m.DebitTotal != nil {
		if err := m.DebitTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debitTotal")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedTransactionsSummary) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DerivedTransactionsSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DerivedTransactionsSummary) UnmarshalBinary(b []byte) error {
	var res DerivedTransactionsSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
