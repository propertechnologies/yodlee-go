// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Capability Capability
// swagger:model Capability
type Capability struct {

	// container
	// Read Only: true
	Container []string `json:"container"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this capability
func (m *Capability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var capabilityContainerItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bank","creditCard","investment","insurance","loan","reward","bill","realEstate","otherAssets","otherLiabilities"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capabilityContainerItemsEnum = append(capabilityContainerItemsEnum, v)
	}
}

func (m *Capability) validateContainerItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, capabilityContainerItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Capability) validateContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.Container) { // not required
		return nil
	}

	for i := 0; i < len(m.Container); i++ {

		// value enum
		if err := m.validateContainerItemsEnum("container"+"."+strconv.Itoa(i), "body", m.Container[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Capability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Capability) UnmarshalBinary(b []byte) error {
	var res Capability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
