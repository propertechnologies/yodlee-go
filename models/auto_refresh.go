// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutoRefresh AutoRefresh
// swagger:model AutoRefresh
type AutoRefresh struct {

	// Indicates the reason for the status.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
	// * SCHEDULED: Auto refresh is scheduled .<br>
	// * TEMP_ERROR: Auto refresh is temporarily disabled due to site or technical issues.<br>
	// * SITE_BLOCKING: Auto refresh is disabled due to site blocking .<br>
	// * SITE_NOT_SUPPORTED: Auto refresh is disabled because the site no longer supports updates.<br>
	// * REAL_TIME_MFA_REQUIRED: Auto refresh is disabled because the site requires real time MFA information to get account updates.<br>
	// * USER_ACTION_REQUIRED: Auto refresh is disabled as the user needs to take action at site or update the credentials or answers for security questions.<br>
	// * UNSUBSCRIBED: Auto refresh is disabled because:<br><ul><li>The customer has unsubscribed to auto refreshes.</li><li>Yodlee has disabled auto refreshes for the customer due to site or technical issues.</li><li>Auto refresh no longer subscribed at the provider account level.</li><li>The site has been disabled for auto refreshes.</li><li>The account is inactive or closed.</li></ul><br>
	// * MANUAL_ACCOUNT: Auto refresh is disabled because the account is a manual account.<br>
	// Read Only: true
	// Enum: [SCHEDULED TEMP_ERROR SITE_BLOCKING SITE_NOT_SUPPORTED REAL_TIME_MFA_REQUIRED USER_ACTION_REQUIRED UNSUBSCRIBED MANUAL_ACCOUNT]
	AdditionalStatus string `json:"additionalStatus,omitempty"`

	// Date on which the auto refresh status is determined.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	AsOfDate string `json:"asOfDate,omitempty"`

	// Indicates whether auto refresh is enabled or disabled.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
	// * ENABLED: Auto refresh is enabled.<br>
	// * DISABLED: Auto refresh is disabled.<br>
	// Read Only: true
	// Enum: [ENABLED DISABLED]
	Status string `json:"status,omitempty"`
}

// Validate validates this auto refresh
func (m *AutoRefresh) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var autoRefreshTypeAdditionalStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCHEDULED","TEMP_ERROR","SITE_BLOCKING","SITE_NOT_SUPPORTED","REAL_TIME_MFA_REQUIRED","USER_ACTION_REQUIRED","UNSUBSCRIBED","MANUAL_ACCOUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		autoRefreshTypeAdditionalStatusPropEnum = append(autoRefreshTypeAdditionalStatusPropEnum, v)
	}
}

const (

	// AutoRefreshAdditionalStatusSCHEDULED captures enum value "SCHEDULED"
	AutoRefreshAdditionalStatusSCHEDULED string = "SCHEDULED"

	// AutoRefreshAdditionalStatusTEMPERROR captures enum value "TEMP_ERROR"
	AutoRefreshAdditionalStatusTEMPERROR string = "TEMP_ERROR"

	// AutoRefreshAdditionalStatusSITEBLOCKING captures enum value "SITE_BLOCKING"
	AutoRefreshAdditionalStatusSITEBLOCKING string = "SITE_BLOCKING"

	// AutoRefreshAdditionalStatusSITENOTSUPPORTED captures enum value "SITE_NOT_SUPPORTED"
	AutoRefreshAdditionalStatusSITENOTSUPPORTED string = "SITE_NOT_SUPPORTED"

	// AutoRefreshAdditionalStatusREALTIMEMFAREQUIRED captures enum value "REAL_TIME_MFA_REQUIRED"
	AutoRefreshAdditionalStatusREALTIMEMFAREQUIRED string = "REAL_TIME_MFA_REQUIRED"

	// AutoRefreshAdditionalStatusUSERACTIONREQUIRED captures enum value "USER_ACTION_REQUIRED"
	AutoRefreshAdditionalStatusUSERACTIONREQUIRED string = "USER_ACTION_REQUIRED"

	// AutoRefreshAdditionalStatusUNSUBSCRIBED captures enum value "UNSUBSCRIBED"
	AutoRefreshAdditionalStatusUNSUBSCRIBED string = "UNSUBSCRIBED"

	// AutoRefreshAdditionalStatusMANUALACCOUNT captures enum value "MANUAL_ACCOUNT"
	AutoRefreshAdditionalStatusMANUALACCOUNT string = "MANUAL_ACCOUNT"
)

// prop value enum
func (m *AutoRefresh) validateAdditionalStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, autoRefreshTypeAdditionalStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AutoRefresh) validateAdditionalStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdditionalStatusEnum("additionalStatus", "body", m.AdditionalStatus); err != nil {
		return err
	}

	return nil
}

var autoRefreshTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		autoRefreshTypeStatusPropEnum = append(autoRefreshTypeStatusPropEnum, v)
	}
}

const (

	// AutoRefreshStatusENABLED captures enum value "ENABLED"
	AutoRefreshStatusENABLED string = "ENABLED"

	// AutoRefreshStatusDISABLED captures enum value "DISABLED"
	AutoRefreshStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *AutoRefresh) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, autoRefreshTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AutoRefresh) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutoRefresh) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoRefresh) UnmarshalBinary(b []byte) error {
	var res AutoRefresh
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
