// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RewardBalance RewardBalance
// swagger:model RewardBalance
type RewardBalance struct {

	// The actual reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	Balance float64 `json:"balance,omitempty"`

	// The balance required to reach a reward level.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	BalanceToLevel string `json:"balanceToLevel,omitempty"`

	// The balance required to qualify for a reward such as retaining membership, business reward, etc.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	BalanceToReward string `json:"balanceToReward,omitempty"`

	// The type of reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
	// * EXPIRING_BALANCE: Reward Balance that will be expired.<br>
	// * BALANCE_TO_LEVEL: The balance required to reach a reward level.<br>
	// * BALANCE_TO_REWARD: The balance required to qualify for a reward.<br>
	// * BALANCE: Reward Balance.<br>
	// * TOTAL_BALANCE: Total reward balance available.<br>
	// Read Only: true
	// Enum: [EXPIRING_BALANCE BALANCE_TO_LEVEL BALANCE_TO_REWARD BALANCE TOTAL_BALANCE]
	BalanceType string `json:"balanceType,omitempty"`

	// The description for the reward balance as available at provider source.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	Description string `json:"description,omitempty"`

	// The date on which the balance expires.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	ExpiryDate string `json:"expiryDate,omitempty"`

	// Unit of reward balance - miles, points, segments, dollars, credits.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	Units string `json:"units,omitempty"`
}

// Validate validates this reward balance
func (m *RewardBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalanceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rewardBalanceTypeBalanceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXPIRING_BALANCE","BALANCE_TO_LEVEL","BALANCE_TO_REWARD","BALANCE","TOTAL_BALANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rewardBalanceTypeBalanceTypePropEnum = append(rewardBalanceTypeBalanceTypePropEnum, v)
	}
}

const (

	// RewardBalanceBalanceTypeEXPIRINGBALANCE captures enum value "EXPIRING_BALANCE"
	RewardBalanceBalanceTypeEXPIRINGBALANCE string = "EXPIRING_BALANCE"

	// RewardBalanceBalanceTypeBALANCETOLEVEL captures enum value "BALANCE_TO_LEVEL"
	RewardBalanceBalanceTypeBALANCETOLEVEL string = "BALANCE_TO_LEVEL"

	// RewardBalanceBalanceTypeBALANCETOREWARD captures enum value "BALANCE_TO_REWARD"
	RewardBalanceBalanceTypeBALANCETOREWARD string = "BALANCE_TO_REWARD"

	// RewardBalanceBalanceTypeBALANCE captures enum value "BALANCE"
	RewardBalanceBalanceTypeBALANCE string = "BALANCE"

	// RewardBalanceBalanceTypeTOTALBALANCE captures enum value "TOTAL_BALANCE"
	RewardBalanceBalanceTypeTOTALBALANCE string = "TOTAL_BALANCE"
)

// prop value enum
func (m *RewardBalance) validateBalanceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rewardBalanceTypeBalanceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RewardBalance) validateBalanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.BalanceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBalanceTypeEnum("balanceType", "body", m.BalanceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RewardBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RewardBalance) UnmarshalBinary(b []byte) error {
	var res RewardBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
