// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DataExtractsUserData DataExtractsUserData
// swagger:model DataExtractsUserData
type DataExtractsUserData struct {

	// account
	// Read Only: true
	Account []*DataExtractsAccount `json:"account"`

	// holding
	// Read Only: true
	Holding []*DataExtractsHolding `json:"holding"`

	// provider account
	// Read Only: true
	ProviderAccount []*DataExtractsProviderAccount `json:"providerAccount"`

	// transaction
	// Read Only: true
	Transaction []*DataExtractsTransaction `json:"transaction"`

	// user
	// Read Only: true
	User *DataExtractsUser `json:"user,omitempty"`
}

// Validate validates this data extracts user data
func (m *DataExtractsUserData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHolding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransaction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataExtractsUserData) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	for i := 0; i < len(m.Account); i++ {
		if swag.IsZero(m.Account[i]) { // not required
			continue
		}

		if m.Account[i] != nil {
			if err := m.Account[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataExtractsUserData) validateHolding(formats strfmt.Registry) error {

	if swag.IsZero(m.Holding) { // not required
		return nil
	}

	for i := 0; i < len(m.Holding); i++ {
		if swag.IsZero(m.Holding[i]) { // not required
			continue
		}

		if m.Holding[i] != nil {
			if err := m.Holding[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("holding" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataExtractsUserData) validateProviderAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderAccount) { // not required
		return nil
	}

	for i := 0; i < len(m.ProviderAccount); i++ {
		if swag.IsZero(m.ProviderAccount[i]) { // not required
			continue
		}

		if m.ProviderAccount[i] != nil {
			if err := m.ProviderAccount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providerAccount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataExtractsUserData) validateTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.Transaction) { // not required
		return nil
	}

	for i := 0; i < len(m.Transaction); i++ {
		if swag.IsZero(m.Transaction[i]) { // not required
			continue
		}

		if m.Transaction[i] != nil {
			if err := m.Transaction[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataExtractsUserData) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataExtractsUserData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataExtractsUserData) UnmarshalBinary(b []byte) error {
	var res DataExtractsUserData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
