// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateTransaction UpdateTransaction
// swagger:model UpdateTransaction
type UpdateTransaction struct {

	// category Id
	// Required: true
	CategoryID *int64 `json:"categoryId"`

	//
	// * SYSTEM: Accounts that are pre-populated by the customers on behalf of their users in to the Yodlee system.<br>
	// * USER: Accounts that are added by the user.<br>
	// Required: true
	// Enum: [SYSTEM USER]
	CategorySource *string `json:"categorySource"`

	//
	// * bank: Applicable for Aggregated and Manual<br>
	// * creditCard: Applicable for Aggregated and Manual<br>
	// * investment: Applicable for Aggregated and Manual<br>
	// * insurance: Applicable for Aggregated and Manual<br>
	// * loan: Applicable for Aggregated and Manual<br>
	// * reward: Applicable for Aggregated and Manual<br>
	// * bill: Applicable for Aggregated and Manual<br>
	// * realEstate: Applicable for Manual<br>
	// * otherAssets: Applicable for Manual<br>
	// * otherLiabilities: Applicable for Manual
	// Required: true
	// Enum: [bank creditCard investment insurance loan reward bill realEstate otherAssets otherLiabilities]
	Container *string `json:"container"`

	// description
	Description *Description `json:"description,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`
}

// Validate validates this update transaction
func (m *UpdateTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategorySource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateTransaction) validateCategoryID(formats strfmt.Registry) error {

	if err := validate.Required("categoryId", "body", m.CategoryID); err != nil {
		return err
	}

	return nil
}

var updateTransactionTypeCategorySourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTransactionTypeCategorySourcePropEnum = append(updateTransactionTypeCategorySourcePropEnum, v)
	}
}

const (

	// UpdateTransactionCategorySourceSYSTEM captures enum value "SYSTEM"
	UpdateTransactionCategorySourceSYSTEM string = "SYSTEM"

	// UpdateTransactionCategorySourceUSER captures enum value "USER"
	UpdateTransactionCategorySourceUSER string = "USER"
)

// prop value enum
func (m *UpdateTransaction) validateCategorySourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateTransactionTypeCategorySourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTransaction) validateCategorySource(formats strfmt.Registry) error {

	if err := validate.Required("categorySource", "body", m.CategorySource); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategorySourceEnum("categorySource", "body", *m.CategorySource); err != nil {
		return err
	}

	return nil
}

var updateTransactionTypeContainerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bank","creditCard","investment","insurance","loan","reward","bill","realEstate","otherAssets","otherLiabilities"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateTransactionTypeContainerPropEnum = append(updateTransactionTypeContainerPropEnum, v)
	}
}

const (

	// UpdateTransactionContainerBank captures enum value "bank"
	UpdateTransactionContainerBank string = "bank"

	// UpdateTransactionContainerCreditCard captures enum value "creditCard"
	UpdateTransactionContainerCreditCard string = "creditCard"

	// UpdateTransactionContainerInvestment captures enum value "investment"
	UpdateTransactionContainerInvestment string = "investment"

	// UpdateTransactionContainerInsurance captures enum value "insurance"
	UpdateTransactionContainerInsurance string = "insurance"

	// UpdateTransactionContainerLoan captures enum value "loan"
	UpdateTransactionContainerLoan string = "loan"

	// UpdateTransactionContainerReward captures enum value "reward"
	UpdateTransactionContainerReward string = "reward"

	// UpdateTransactionContainerBill captures enum value "bill"
	UpdateTransactionContainerBill string = "bill"

	// UpdateTransactionContainerRealEstate captures enum value "realEstate"
	UpdateTransactionContainerRealEstate string = "realEstate"

	// UpdateTransactionContainerOtherAssets captures enum value "otherAssets"
	UpdateTransactionContainerOtherAssets string = "otherAssets"

	// UpdateTransactionContainerOtherLiabilities captures enum value "otherLiabilities"
	UpdateTransactionContainerOtherLiabilities string = "otherLiabilities"
)

// prop value enum
func (m *UpdateTransaction) validateContainerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateTransactionTypeContainerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateTransaction) validateContainer(formats strfmt.Registry) error {

	if err := validate.Required("container", "body", m.Container); err != nil {
		return err
	}

	// value enum
	if err := m.validateContainerEnum("container", "body", *m.Container); err != nil {
		return err
	}

	return nil
}

func (m *UpdateTransaction) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateTransaction) UnmarshalBinary(b []byte) error {
	var res UpdateTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
