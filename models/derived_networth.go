// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DerivedNetworth DerivedNetworth
// swagger:model DerivedNetworth
type DerivedNetworth struct {

	// The asset value that the user owns.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
	// Read Only: true
	Asset *Money `json:"asset,omitempty"`

	// The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
	// Read Only: true
	Date string `json:"date,omitempty"`

	// Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
	// Read Only: true
	HistoricalBalances []*DerivedNetworthHistoricalBalance `json:"historicalBalances"`

	// The liability amount that the user owes.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
	// Read Only: true
	Liability *Money `json:"liability,omitempty"`

	// Networth of the user.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
	// Read Only: true
	Networth *Money `json:"networth,omitempty"`
}

// Validate validates this derived networth
func (m *DerivedNetworth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistoricalBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedNetworth) validateAsset(formats strfmt.Registry) error {

	if swag.IsZero(m.Asset) { // not required
		return nil
	}

	if m.Asset != nil {
		if err := m.Asset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedNetworth) validateHistoricalBalances(formats strfmt.Registry) error {

	if swag.IsZero(m.HistoricalBalances) { // not required
		return nil
	}

	for i := 0; i < len(m.HistoricalBalances); i++ {
		if swag.IsZero(m.HistoricalBalances[i]) { // not required
			continue
		}

		if m.HistoricalBalances[i] != nil {
			if err := m.HistoricalBalances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("historicalBalances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DerivedNetworth) validateLiability(formats strfmt.Registry) error {

	if swag.IsZero(m.Liability) { // not required
		return nil
	}

	if m.Liability != nil {
		if err := m.Liability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("liability")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedNetworth) validateNetworth(formats strfmt.Registry) error {

	if swag.IsZero(m.Networth) { // not required
		return nil
	}

	if m.Networth != nil {
		if err := m.Networth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DerivedNetworth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DerivedNetworth) UnmarshalBinary(b []byte) error {
	var res DerivedNetworth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
