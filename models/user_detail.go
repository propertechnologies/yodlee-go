// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDetail UserDetail
// swagger:model UserDetail
type UserDetail struct {

	// The address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>
	// Read Only: true
	Address *UserAddress `json:"address,omitempty"`

	// The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>
	// Read Only: true
	Email string `json:"email,omitempty"`

	// The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>
	// Read Only: true
	LoginName string `json:"loginName,omitempty"`

	// First, middle and last names of the user.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>
	// Read Only: true
	Name *Name `json:"name,omitempty"`

	// Preferences of the user to be respected in the data provided through various API services.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>
	// Read Only: true
	Preferences *UserResponsePreferences `json:"preferences,omitempty"`

	// role type
	// Enum: [INDIVIDUAL]
	RoleType string `json:"roleType,omitempty"`

	// segment name
	SegmentName string `json:"segmentName,omitempty"`
}

// Validate validates this user detail
func (m *UserDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDetail) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *UserDetail) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *UserDetail) validatePreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.Preferences) { // not required
		return nil
	}

	if m.Preferences != nil {
		if err := m.Preferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

var userDetailTypeRoleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INDIVIDUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDetailTypeRoleTypePropEnum = append(userDetailTypeRoleTypePropEnum, v)
	}
}

const (

	// UserDetailRoleTypeINDIVIDUAL captures enum value "INDIVIDUAL"
	UserDetailRoleTypeINDIVIDUAL string = "INDIVIDUAL"
)

// prop value enum
func (m *UserDetail) validateRoleTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userDetailTypeRoleTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserDetail) validateRoleType(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleTypeEnum("roleType", "body", m.RoleType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDetail) UnmarshalBinary(b []byte) error {
	var res UserDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
