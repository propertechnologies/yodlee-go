// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserResponsePreferences UserResponsePreferences
// swagger:model UserResponsePreferences
type UserResponsePreferences struct {

	// The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>
	// * AUD: Australia Dollar<br>
	// * BRL: Brazil Real<br>
	// * CAD: Canada Dollar<br>
	// * EUR: Euro Member Countries<br>
	// * GBP: United Kingdom Pound<br>
	// * HKD: Hong Kong Dollar<br>
	// * IDR: Indonesia Rupiah<br>
	// * INR: India Rupee<br>
	// * JPY: Japan Yen<br>
	// * NZD: New Zealand Dollar<br>
	// * SGD: Singapore Dollar<br>
	// * USD: United States Dollar<br>
	// * ZAR: South Africa Rand<br>
	// * CNY: China Yuan Renminbi<br>
	// * VND: Viet Nam Dong<br>
	// Enum: [AUD BRL CAD EUR GBP HKD IDR INR JPY NZD SGD USD ZAR CNY VND]
	Currency string `json:"currency,omitempty"`

	// The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.
	// Read Only: true
	DateFormat string `json:"dateFormat,omitempty"`

	// The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>
	// * en_US: English - United States of America<br>
	// * en_ES: Spanish - Spain<br>
	// * fr_CA: French - Canada<br>
	// * zh_CN: Chinese - China<br>
	// Enum: [en_US en_ES fr_CA zh_CN]
	Locale string `json:"locale,omitempty"`

	// The timezone of the user. This attribute is just a place holder and has no impact on any other API services.
	// Read Only: true
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this user response preferences
func (m *UserResponsePreferences) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userResponsePreferencesTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUD","BRL","CAD","EUR","GBP","HKD","IDR","INR","JPY","NZD","SGD","USD","ZAR","CNY","VND"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userResponsePreferencesTypeCurrencyPropEnum = append(userResponsePreferencesTypeCurrencyPropEnum, v)
	}
}

const (

	// UserResponsePreferencesCurrencyAUD captures enum value "AUD"
	UserResponsePreferencesCurrencyAUD string = "AUD"

	// UserResponsePreferencesCurrencyBRL captures enum value "BRL"
	UserResponsePreferencesCurrencyBRL string = "BRL"

	// UserResponsePreferencesCurrencyCAD captures enum value "CAD"
	UserResponsePreferencesCurrencyCAD string = "CAD"

	// UserResponsePreferencesCurrencyEUR captures enum value "EUR"
	UserResponsePreferencesCurrencyEUR string = "EUR"

	// UserResponsePreferencesCurrencyGBP captures enum value "GBP"
	UserResponsePreferencesCurrencyGBP string = "GBP"

	// UserResponsePreferencesCurrencyHKD captures enum value "HKD"
	UserResponsePreferencesCurrencyHKD string = "HKD"

	// UserResponsePreferencesCurrencyIDR captures enum value "IDR"
	UserResponsePreferencesCurrencyIDR string = "IDR"

	// UserResponsePreferencesCurrencyINR captures enum value "INR"
	UserResponsePreferencesCurrencyINR string = "INR"

	// UserResponsePreferencesCurrencyJPY captures enum value "JPY"
	UserResponsePreferencesCurrencyJPY string = "JPY"

	// UserResponsePreferencesCurrencyNZD captures enum value "NZD"
	UserResponsePreferencesCurrencyNZD string = "NZD"

	// UserResponsePreferencesCurrencySGD captures enum value "SGD"
	UserResponsePreferencesCurrencySGD string = "SGD"

	// UserResponsePreferencesCurrencyUSD captures enum value "USD"
	UserResponsePreferencesCurrencyUSD string = "USD"

	// UserResponsePreferencesCurrencyZAR captures enum value "ZAR"
	UserResponsePreferencesCurrencyZAR string = "ZAR"

	// UserResponsePreferencesCurrencyCNY captures enum value "CNY"
	UserResponsePreferencesCurrencyCNY string = "CNY"

	// UserResponsePreferencesCurrencyVND captures enum value "VND"
	UserResponsePreferencesCurrencyVND string = "VND"
)

// prop value enum
func (m *UserResponsePreferences) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userResponsePreferencesTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserResponsePreferences) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

var userResponsePreferencesTypeLocalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en_US","en_ES","fr_CA","zh_CN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userResponsePreferencesTypeLocalePropEnum = append(userResponsePreferencesTypeLocalePropEnum, v)
	}
}

const (

	// UserResponsePreferencesLocaleEnUS captures enum value "en_US"
	UserResponsePreferencesLocaleEnUS string = "en_US"

	// UserResponsePreferencesLocaleEnES captures enum value "en_ES"
	UserResponsePreferencesLocaleEnES string = "en_ES"

	// UserResponsePreferencesLocaleFrCA captures enum value "fr_CA"
	UserResponsePreferencesLocaleFrCA string = "fr_CA"

	// UserResponsePreferencesLocaleZhCN captures enum value "zh_CN"
	UserResponsePreferencesLocaleZhCN string = "zh_CN"
)

// prop value enum
func (m *UserResponsePreferences) validateLocaleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userResponsePreferencesTypeLocalePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserResponsePreferences) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocaleEnum("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserResponsePreferences) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserResponsePreferences) UnmarshalBinary(b []byte) error {
	var res UserResponsePreferences
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
