// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProviderAccountRequest ProviderAccountRequest
// swagger:model ProviderAccountRequest
type ProviderAccountRequest struct {

	// dataset
	Dataset []*ProvidersDataset `json:"dataset"`

	// dataset name
	DatasetName []string `json:"datasetName"`

	// field
	Field []*Field `json:"field"`

	// preferences
	Preferences *ProviderAccountPreferences `json:"preferences,omitempty"`
}

// Validate validates this provider account request
func (m *ProviderAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatasetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProviderAccountRequest) validateDataset(formats strfmt.Registry) error {

	if swag.IsZero(m.Dataset) { // not required
		return nil
	}

	for i := 0; i < len(m.Dataset); i++ {
		if swag.IsZero(m.Dataset[i]) { // not required
			continue
		}

		if m.Dataset[i] != nil {
			if err := m.Dataset[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var providerAccountRequestDatasetNameItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BASIC_AGG_DATA","ADVANCE_AGG_DATA","ACCT_PROFILE","DOCUMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providerAccountRequestDatasetNameItemsEnum = append(providerAccountRequestDatasetNameItemsEnum, v)
	}
}

func (m *ProviderAccountRequest) validateDatasetNameItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providerAccountRequestDatasetNameItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProviderAccountRequest) validateDatasetName(formats strfmt.Registry) error {

	if swag.IsZero(m.DatasetName) { // not required
		return nil
	}

	for i := 0; i < len(m.DatasetName); i++ {

		// value enum
		if err := m.validateDatasetNameItemsEnum("datasetName"+"."+strconv.Itoa(i), "body", m.DatasetName[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ProviderAccountRequest) validateField(formats strfmt.Registry) error {

	if swag.IsZero(m.Field) { // not required
		return nil
	}

	for i := 0; i < len(m.Field); i++ {
		if swag.IsZero(m.Field[i]) { // not required
			continue
		}

		if m.Field[i] != nil {
			if err := m.Field[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("field" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProviderAccountRequest) validatePreferences(formats strfmt.Registry) error {

	if swag.IsZero(m.Preferences) { // not required
		return nil
	}

	if m.Preferences != nil {
		if err := m.Preferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProviderAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProviderAccountRequest) UnmarshalBinary(b []byte) error {
	var res ProviderAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
