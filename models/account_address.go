// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountAddress AccountAddress
// swagger:model AccountAddress
type AccountAddress struct {

	// address1
	Address1 string `json:"address1,omitempty"`

	// address2
	Address2 string `json:"address2,omitempty"`

	// address3
	Address3 string `json:"address3,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// full address
	FullAddress string `json:"fullAddress,omitempty"`

	// source type
	SourceType string `json:"sourceType,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// type
	// Enum: [BUSINESS WORK HOME PAYMENT PAYOFF]
	Type string `json:"type,omitempty"`

	// zip
	Zip string `json:"zip,omitempty"`
}

// Validate validates this account address
func (m *AccountAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var accountAddressTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUSINESS","WORK","HOME","PAYMENT","PAYOFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountAddressTypeTypePropEnum = append(accountAddressTypeTypePropEnum, v)
	}
}

const (

	// AccountAddressTypeBUSINESS captures enum value "BUSINESS"
	AccountAddressTypeBUSINESS string = "BUSINESS"

	// AccountAddressTypeWORK captures enum value "WORK"
	AccountAddressTypeWORK string = "WORK"

	// AccountAddressTypeHOME captures enum value "HOME"
	AccountAddressTypeHOME string = "HOME"

	// AccountAddressTypePAYMENT captures enum value "PAYMENT"
	AccountAddressTypePAYMENT string = "PAYMENT"

	// AccountAddressTypePAYOFF captures enum value "PAYOFF"
	AccountAddressTypePAYOFF string = "PAYOFF"
)

// prop value enum
func (m *AccountAddress) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountAddressTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountAddress) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAddress) UnmarshalBinary(b []byte) error {
	var res AccountAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
