// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoginForm LoginForm
// swagger:model LoginForm
type LoginForm struct {

	// The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	ForgetPasswordURL string `json:"forgetPasswordURL,omitempty"`

	// The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
	// * login: The primary login form displayed in the provider site.<br>
	// * questionAndAnswer: The form requesting answers for the secret questions from the user during login.<br>
	// * token: The form requesting additional token information from the user during login.<br>
	// * image: The loginform that displays CAPTCHA for an user to enter the text during login.<br>
	// Enum: [login questionAndAnswer token image]
	FormType string `json:"formType,omitempty"`

	// The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	Help string `json:"help,omitempty"`

	// The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	ID int64 `json:"id,omitempty"`

	// The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	LoginHelp string `json:"loginHelp,omitempty"`

	// The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	MfaInfoText string `json:"mfaInfoText,omitempty"`

	// The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	MfaInfoTitle string `json:"mfaInfoTitle,omitempty"`

	// The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	MfaTimeout int64 `json:"mfaTimeout,omitempty"`

	// This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	Row []*Row `json:"row"`
}

// Validate validates this login form
func (m *LoginForm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var loginFormTypeFormTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["login","questionAndAnswer","token","image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loginFormTypeFormTypePropEnum = append(loginFormTypeFormTypePropEnum, v)
	}
}

const (

	// LoginFormFormTypeLogin captures enum value "login"
	LoginFormFormTypeLogin string = "login"

	// LoginFormFormTypeQuestionAndAnswer captures enum value "questionAndAnswer"
	LoginFormFormTypeQuestionAndAnswer string = "questionAndAnswer"

	// LoginFormFormTypeToken captures enum value "token"
	LoginFormFormTypeToken string = "token"

	// LoginFormFormTypeImage captures enum value "image"
	LoginFormFormTypeImage string = "image"
)

// prop value enum
func (m *LoginForm) validateFormTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, loginFormTypeFormTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LoginForm) validateFormType(formats strfmt.Registry) error {

	if swag.IsZero(m.FormType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormTypeEnum("formType", "body", m.FormType); err != nil {
		return err
	}

	return nil
}

func (m *LoginForm) validateRow(formats strfmt.Registry) error {

	if swag.IsZero(m.Row) { // not required
		return nil
	}

	for i := 0; i < len(m.Row); i++ {
		if swag.IsZero(m.Row[i]) { // not required
			continue
		}

		if m.Row[i] != nil {
			if err := m.Row[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("row" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoginForm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoginForm) UnmarshalBinary(b []byte) error {
	var res LoginForm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
