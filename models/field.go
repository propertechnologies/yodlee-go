// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Field Field
// swagger:model Field
type Field struct {

	// Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	ID string `json:"id,omitempty"`

	// Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	IsOptional *bool `json:"isOptional,omitempty"`

	// Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>
	// Read Only: true
	IsValueProvided *bool `json:"isValueProvided,omitempty"`

	// The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	MaxLength int64 `json:"maxLength,omitempty"`

	// Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	Option []*Option `json:"option"`

	// The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	Prefix string `json:"prefix,omitempty"`

	// The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`

	// This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
	// * text: The field values can be accepted in a clear text when the user enters the values.<br>
	// * password: The field values should be accepted in a masked form when the user enters the values.<br>
	// * option: The field values should be displayed in a drop down.<br>
	// * checkbox: The field values should be displayed in a check box.<br>
	// * radio: The field values should be displayed as radio options.<br>
	// * image: The field values should be displayed as image<br>
	// Read Only: true
	// Enum: [text password option checkbox radio image]
	Type string `json:"type,omitempty"`

	// Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	Value string `json:"value,omitempty"`

	// Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
	// Read Only: true
	ValueEditable *bool `json:"valueEditable,omitempty"`
}

// Validate validates this field
func (m *Field) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Field) validateOption(formats strfmt.Registry) error {

	if swag.IsZero(m.Option) { // not required
		return nil
	}

	for i := 0; i < len(m.Option); i++ {
		if swag.IsZero(m.Option[i]) { // not required
			continue
		}

		if m.Option[i] != nil {
			if err := m.Option[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("option" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var fieldTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","password","option","checkbox","radio","image"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fieldTypeTypePropEnum = append(fieldTypeTypePropEnum, v)
	}
}

const (

	// FieldTypeText captures enum value "text"
	FieldTypeText string = "text"

	// FieldTypePassword captures enum value "password"
	FieldTypePassword string = "password"

	// FieldTypeOption captures enum value "option"
	FieldTypeOption string = "option"

	// FieldTypeCheckbox captures enum value "checkbox"
	FieldTypeCheckbox string = "checkbox"

	// FieldTypeRadio captures enum value "radio"
	FieldTypeRadio string = "radio"

	// FieldTypeImage captures enum value "image"
	FieldTypeImage string = "image"
)

// prop value enum
func (m *Field) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fieldTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Field) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Field) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Field) UnmarshalBinary(b []byte) error {
	var res Field
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
