// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BankTransferCode BankTransferCode
// swagger:model BankTransferCode
type BankTransferCode struct {

	// The FI's branch identification number.Additional Details: The routing number of the bank account in the United States. For non-United States accounts, it is the IFSC code (India), BSB number (Australia), and sort code (United Kingdom). <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The bank transfer code type varies depending on the region of the account origination. <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
	// * BSB: BSB is a Bank-State-Branch number used to identify the branch in Australia and is required for performing transfers.<br>
	// * IFSC: IFSC is Indian Financial System Code. It is an alphanumeric code that is used to identify the particular branch in India and is required for electronic funds settlement.<br>
	// * ROUTING_NUMBER: Bank routing number or routing transit number (RTN) is a nine digit number used in US to identify financial institution in a transaction. Most common transaction types where routing numbers are used are ACH and wire transfers.<br>
	// * SORT_CODE: The sort code is a six-digit number used in UK to identify both the bank and the branch where the account is held.<br>
	// Read Only: true
	// Enum: [BSB IFSC ROUTING_NUMBER SORT_CODE]
	Type string `json:"type,omitempty"`
}

// Validate validates this bank transfer code
func (m *BankTransferCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bankTransferCodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BSB","IFSC","ROUTING_NUMBER","SORT_CODE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bankTransferCodeTypeTypePropEnum = append(bankTransferCodeTypeTypePropEnum, v)
	}
}

const (

	// BankTransferCodeTypeBSB captures enum value "BSB"
	BankTransferCodeTypeBSB string = "BSB"

	// BankTransferCodeTypeIFSC captures enum value "IFSC"
	BankTransferCodeTypeIFSC string = "IFSC"

	// BankTransferCodeTypeROUTINGNUMBER captures enum value "ROUTING_NUMBER"
	BankTransferCodeTypeROUTINGNUMBER string = "ROUTING_NUMBER"

	// BankTransferCodeTypeSORTCODE captures enum value "SORT_CODE"
	BankTransferCodeTypeSORTCODE string = "SORT_CODE"
)

// prop value enum
func (m *BankTransferCode) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bankTransferCodeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BankTransferCode) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BankTransferCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BankTransferCode) UnmarshalBinary(b []byte) error {
	var res BankTransferCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
