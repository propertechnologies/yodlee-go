// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// LoanPayoffDetails LoanPayoffDetails
// swagger:model LoanPayoffDetails
type LoanPayoffDetails struct {

	// The outstanding balance on the loan account. The outstanding balance amount may differ from the payoff amount. It is usually the sum of outstanding principal, unpaid interest, and fees, if any.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	OutstandingBalance *Money `json:"outstandingBalance,omitempty"`

	// The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	PayByDate string `json:"payByDate,omitempty"`

	// The loan payoff amount.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
	// Read Only: true
	PayoffAmount *Money `json:"payoffAmount,omitempty"`
}

// Validate validates this loan payoff details
func (m *LoanPayoffDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutstandingBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoffAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoanPayoffDetails) validateOutstandingBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.OutstandingBalance) { // not required
		return nil
	}

	if m.OutstandingBalance != nil {
		if err := m.OutstandingBalance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outstandingBalance")
			}
			return err
		}
	}

	return nil
}

func (m *LoanPayoffDetails) validatePayoffAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.PayoffAmount) { // not required
		return nil
	}

	if m.PayoffAmount != nil {
		if err := m.PayoffAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payoffAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoanPayoffDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoanPayoffDetails) UnmarshalBinary(b []byte) error {
	var res LoanPayoffDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
