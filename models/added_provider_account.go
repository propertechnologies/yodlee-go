// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddedProviderAccount AddedProviderAccount
// swagger:model AddedProviderAccount
type AddedProviderAccount struct {

	// The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
	// * SYSTEM: Accounts that are pre-populated by the customers on behalf of their users in to the Yodlee system.<br>
	// * USER: Accounts that are added by the user.<br>
	// Read Only: true
	// Enum: [SYSTEM USER]
	AggregationSource string `json:"aggregationSource,omitempty"`

	// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	Dataset []*AccountDataset `json:"dataset"`

	// Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	IsManual *bool `json:"isManual,omitempty"`

	// Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	ProviderID int64 `json:"providerId,omitempty"`

	// Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	RequestID string `json:"requestId,omitempty"`

	// The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
	// * LOGIN_IN_PROGRESS: Login to provider site is in progress.<br>
	// * USER_INPUT_REQUIRED: Additional authentication information is needed from the user.<br>
	// * IN_PROGRESS: Login is successful and data aggregation is in progress.<br>
	// * PARTIAL_SUCCESS: Data is partially retrieved.<br>
	// * SUCCESS: Data is retrieved successfully.<br>
	// * FAILED: Additional authentication information is needed from the user.<br>
	// Read Only: true
	// Enum: [LOGIN_IN_PROGRESS USER_INPUT_REQUIRED IN_PROGRESS PARTIAL_SUCCESS SUCCESS FAILED]
	Status string `json:"status,omitempty"`
}

// Validate validates this added provider account
func (m *AddedProviderAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addedProviderAccountTypeAggregationSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addedProviderAccountTypeAggregationSourcePropEnum = append(addedProviderAccountTypeAggregationSourcePropEnum, v)
	}
}

const (

	// AddedProviderAccountAggregationSourceSYSTEM captures enum value "SYSTEM"
	AddedProviderAccountAggregationSourceSYSTEM string = "SYSTEM"

	// AddedProviderAccountAggregationSourceUSER captures enum value "USER"
	AddedProviderAccountAggregationSourceUSER string = "USER"
)

// prop value enum
func (m *AddedProviderAccount) validateAggregationSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addedProviderAccountTypeAggregationSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddedProviderAccount) validateAggregationSource(formats strfmt.Registry) error {

	if swag.IsZero(m.AggregationSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateAggregationSourceEnum("aggregationSource", "body", m.AggregationSource); err != nil {
		return err
	}

	return nil
}

func (m *AddedProviderAccount) validateDataset(formats strfmt.Registry) error {

	if swag.IsZero(m.Dataset) { // not required
		return nil
	}

	for i := 0; i < len(m.Dataset); i++ {
		if swag.IsZero(m.Dataset[i]) { // not required
			continue
		}

		if m.Dataset[i] != nil {
			if err := m.Dataset[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var addedProviderAccountTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOGIN_IN_PROGRESS","USER_INPUT_REQUIRED","IN_PROGRESS","PARTIAL_SUCCESS","SUCCESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addedProviderAccountTypeStatusPropEnum = append(addedProviderAccountTypeStatusPropEnum, v)
	}
}

const (

	// AddedProviderAccountStatusLOGININPROGRESS captures enum value "LOGIN_IN_PROGRESS"
	AddedProviderAccountStatusLOGININPROGRESS string = "LOGIN_IN_PROGRESS"

	// AddedProviderAccountStatusUSERINPUTREQUIRED captures enum value "USER_INPUT_REQUIRED"
	AddedProviderAccountStatusUSERINPUTREQUIRED string = "USER_INPUT_REQUIRED"

	// AddedProviderAccountStatusINPROGRESS captures enum value "IN_PROGRESS"
	AddedProviderAccountStatusINPROGRESS string = "IN_PROGRESS"

	// AddedProviderAccountStatusPARTIALSUCCESS captures enum value "PARTIAL_SUCCESS"
	AddedProviderAccountStatusPARTIALSUCCESS string = "PARTIAL_SUCCESS"

	// AddedProviderAccountStatusSUCCESS captures enum value "SUCCESS"
	AddedProviderAccountStatusSUCCESS string = "SUCCESS"

	// AddedProviderAccountStatusFAILED captures enum value "FAILED"
	AddedProviderAccountStatusFAILED string = "FAILED"
)

// prop value enum
func (m *AddedProviderAccount) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addedProviderAccountTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddedProviderAccount) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddedProviderAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddedProviderAccount) UnmarshalBinary(b []byte) error {
	var res AddedProviderAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
