// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Email Email
// swagger:model Email
type Email struct {

	// type
	// Read Only: true
	// Enum: [primary secondary personal work others]
	Type string `json:"type,omitempty"`

	// value
	// Read Only: true
	Value string `json:"value,omitempty"`
}

// Validate validates this email
func (m *Email) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var emailTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","secondary","personal","work","others"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		emailTypeTypePropEnum = append(emailTypeTypePropEnum, v)
	}
}

const (

	// EmailTypePrimary captures enum value "primary"
	EmailTypePrimary string = "primary"

	// EmailTypeSecondary captures enum value "secondary"
	EmailTypeSecondary string = "secondary"

	// EmailTypePersonal captures enum value "personal"
	EmailTypePersonal string = "personal"

	// EmailTypeWork captures enum value "work"
	EmailTypeWork string = "work"

	// EmailTypeOthers captures enum value "others"
	EmailTypeOthers string = "others"
)

// prop value enum
func (m *Email) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, emailTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Email) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Email) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Email) UnmarshalBinary(b []byte) error {
	var res Email
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
