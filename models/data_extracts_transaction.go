// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataExtractsTransaction DataExtractsTransaction
// swagger:model DataExtractsTransaction
type DataExtractsTransaction struct {

	// The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * bank: Applicable for Aggregated and Manual<br>
	// * creditCard: Applicable for Aggregated and Manual<br>
	// * investment: Applicable for Aggregated and Manual<br>
	// * insurance: Applicable for Aggregated and Manual<br>
	// * loan: Applicable for Aggregated and Manual<br>
	// * reward: Applicable for Aggregated and Manual<br>
	// * bill: Applicable for Aggregated and Manual<br>
	// * realEstate: Applicable for Manual<br>
	// * otherAssets: Applicable for Manual<br>
	// * otherLiabilities: Applicable for Manual
	// Read Only: true
	// Enum: [bank creditCard investment insurance loan reward bill realEstate otherAssets otherLiabilities]
	CONTAINER string `json:"CONTAINER,omitempty"`

	// The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	AccountID int64 `json:"accountId,omitempty"`

	// The amount of the transaction as it appears at the FI site. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Amount *Money `json:"amount,omitempty"`

	// Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * CREDIT: Denotes that the transactions are being credited to the account.<br>
	// * DEBIT: Denotes that the transactions are getting debited to the account.<br>
	// Read Only: true
	// Enum: [CREDIT DEBIT]
	BaseType string `json:"baseType,omitempty"`

	// The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Category string `json:"category,omitempty"`

	// The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	CategoryID int64 `json:"categoryId,omitempty"`

	// Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * SYSTEM: The category assigned to the transaction is a system defined category.<br>
	// * USER: The category assigned to the transaction is a user defined category.<br>
	// Read Only: true
	// Enum: [SYSTEM USER]
	CategorySource string `json:"categorySource,omitempty"`

	// The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// * TRANSFER: The transaction category belongs to a transfer category type.<br>
	// * DEFERRED_COMPENSATION: The transaction category belongs to deferred compensation type.<br>
	// * UNCATEGORIZE: The transaction does not seem to be categorized.<br>
	// * INCOME: The transaction category belongs to an income type.<br>
	// * EXPENSE: The transaction category belongs to an expense type.<br>
	// Read Only: true
	// Enum: [TRANSFER DEFERRED_COMPENSATION UNCATEGORIZE INCOME EXPENSE]
	CategoryType string `json:"categoryType,omitempty"`

	// The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>
	// Read Only: true
	CheckNumber string `json:"checkNumber,omitempty"`

	// A commission or brokerage associated with a transaction.<br><br><br><b>Additional Details</b>:The commission only applies to trade-related transactions.<b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Commission *Money `json:"commission,omitempty"`

	// created date
	// Read Only: true
	CreatedDate string `json:"createdDate,omitempty"`

	// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	CusipNumber string `json:"cusipNumber,omitempty"`

	// The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Date string `json:"date,omitempty"`

	// Description details<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Description *Description `json:"description,omitempty"`

	// The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>
	// Read Only: true
	DetailCategoryID int64 `json:"detailCategoryId,omitempty"`

	// The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	HighLevelCategoryID int64 `json:"highLevelCategoryId,omitempty"`

	// For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	HoldingDescription string `json:"holdingDescription,omitempty"`

	// An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// The portion of interest in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>
	// Read Only: true
	Interest *Money `json:"interest,omitempty"`

	// Indicates if the transaction is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>
	// Read Only: true
	IsDeleted *bool `json:"isDeleted,omitempty"`

	// Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	IsManual *bool `json:"isManual,omitempty"`

	// last updated
	// Read Only: true
	LastUpdated string `json:"lastUpdated,omitempty"`

	// Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Memo string `json:"memo,omitempty"`

	// The name of the merchant associated with the transaction.<br><b>Note</b>: The merchant name field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Merchant *Merchant `json:"merchant,omitempty"`

	// The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	ParentCategoryID int64 `json:"parentCategoryId,omitempty"`

	// The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>
	// Read Only: true
	PostDate string `json:"postDate,omitempty"`

	// The price of the security for the transaction.<br><b>Note</b>: The price field applies only to the trade related transactions. <br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	Price *Money `json:"price,omitempty"`

	// The portion of the principal in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>
	// Read Only: true
	Principal *Money `json:"principal,omitempty"`

	// The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	Quantity float64 `json:"quantity,omitempty"`

	// The running balance in an account indicates the balance of the account after every transaction.<br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
	// Read Only: true
	RunningBalance *Money `json:"runningBalance,omitempty"`

	// It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	SettleDate string `json:"settleDate,omitempty"`

	// The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>
	// * AGGREGATED: Indicates that the transactions is aggregated from the provider site.<br>
	// * MANUAL: Indicates that the transaction is created manually by the user.<br>
	// Read Only: true
	// Enum: [AGGREGATED MANUAL]
	SourceType string `json:"sourceType,omitempty"`

	// The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * POSTED: Denotes that the transaction is realized on the account's balance.<br>
	// * PENDING: Denotes that the transaction is not yet realized on the account's balance.<br>
	// * SCHEDULED: Denotes that the transacation is a future dated transaction.<br>
	// * FAILED: Denotes the failed transactions. It is only applicable to rejected claims in a Flexible Spending account.<br>
	// Read Only: true
	// Enum: [POSTED PENDING SCHEDULED FAILED]
	Status string `json:"status,omitempty"`

	// The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	// Enum: [AUTH_HOLD AUTH_REQUEST OVERDRAFT_CHARGE CREDIT_ADJUSTMENT PIN_DEBIT BANK_DIRECT_DEPOSIT DIVIDEND_DEPOSIT INTEREST_SAVINGS INTEREST_ADJUSTMENT ONLINE_PURCHASE PURCHASED_WITH_CHECK RECURRING_BILLING TAX_PAYMENT PAYMENT_BY_CHECK PAYMENT_PLAN FEE_REFUND WIRE_TRANSFER_CHARGE ACCOUNT_TO_ACCOUNT_TRANSFER BANK_TO_BANK_TRANSACTION BANK_TO_NON_BANK_ACCOUNT_TRANSFER CASH_WITHDRAWAL_AT_FI ATM_CASH_WITHDRAWAL AUTH_PROCESSING AUTH_RELEASE PRE_AUTH AUTH_COMPLETE AUTH_VOID BALANCE_ENQUIRY ACCOUNT_VERIFICATION PRE_AUTH_COMPLETION SERVICE_CHARGE SERVICE_CHARGE_FEE_REFUND RETURNED_CHECK_CHARGE RETURNED_CHECK_REIMBURSEMENT CASH_ADVANCE BILL_PAY_CHARGE CHECK_IMAGE_SERVICE_CHARGE OVERDRAFT_PROTECTION_CHARGE STOP_PAYMENT_CHARGE CHECKS_ORDERING_CHARGE MONTHLY_MAINTENANCE_CHARGE DEBIT_CARD_FEE CONVENIENCE_FEE PERSONAL_LOAN_CREDIT CREDIT_CARD_CREDIT AUTO_LOAN HOME_LOAN_MORTGAGE SHORT_TERM_CREDIT SIGNATURE_DEBIT CONTACT_LESS_DEBIT DEFERRED_DEPOSIT DEFERRED_BILL_PAY INSTALLMENT_PAYMENT RECURRING_SUBSCRIPTION_PAYMENT HOLD_CHECK_PAYMENT CAPITAL_GAINS_DISTIBUTION CG_LONG_TERM_DEPOSIT OPEN_SALE_DEPOSIT INTEREST__CHECK PURCHASE_VOID PURCHASE_WITH_CREDIT_CARD PURCHASE_WITH_DEBIT_CARD CHARGE_A_REPEAT_CUSTOMER DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT FEE_PAYMENT FINANCE_CHARGE_REFUND TRANSACTION_VOID FEE_VOID DEBIT_CARD_WITHDRAWAL_AT_STORE ELECTRONIC_PAYMENT ACH_DEBIT ATM_TELLER_DEPOSIT POS_DEBIT BANK_ADJUSTMENT CHARGES_FEES INTEREST DEPOSITS_CREDITS PAYMENT PURCHASE REFUND TRANSFER WITHDRAWAL OTHER_DEPOSITS OTHER_WITHDRAWALS ADJUSTMENT FINANCE_CHARGE OTHER_CHARGES_FEES ANNUAL_FEE DEPOSIT DIRECT_DEPOSIT_SALARY INVESTMENT_INCOME_CASH SSA REWARDS CHECK_DEPOSIT MOBILE_REMOTE_DEPOSIT TELLER_DEPOSIT TAX_REFUND CREDIT_CARD_PAYMENT INSURANCE_PAYMENT UTILITIES_PAYMENT CHILD_SUPPORT LOAN PERSONAL_LOAN STUDENT_LOAN SALES_TAX REIMBURSEMENT BALANCE_TRANSFER WIRE_TRANSFER OVERDRAFT_PROTECTION DEBIT CREDIT NSF_FEES]
	SubType string `json:"subType,omitempty"`

	// The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	Symbol string `json:"symbol,omitempty"`

	// The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	TransactionDate string `json:"transactionDate,omitempty"`

	// The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this data extracts transaction
func (m *DataExtractsTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCONTAINER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategorySource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataExtractsTransactionTypeCONTAINERPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bank","creditCard","investment","insurance","loan","reward","bill","realEstate","otherAssets","otherLiabilities"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeCONTAINERPropEnum = append(dataExtractsTransactionTypeCONTAINERPropEnum, v)
	}
}

const (

	// DataExtractsTransactionCONTAINERBank captures enum value "bank"
	DataExtractsTransactionCONTAINERBank string = "bank"

	// DataExtractsTransactionCONTAINERCreditCard captures enum value "creditCard"
	DataExtractsTransactionCONTAINERCreditCard string = "creditCard"

	// DataExtractsTransactionCONTAINERInvestment captures enum value "investment"
	DataExtractsTransactionCONTAINERInvestment string = "investment"

	// DataExtractsTransactionCONTAINERInsurance captures enum value "insurance"
	DataExtractsTransactionCONTAINERInsurance string = "insurance"

	// DataExtractsTransactionCONTAINERLoan captures enum value "loan"
	DataExtractsTransactionCONTAINERLoan string = "loan"

	// DataExtractsTransactionCONTAINERReward captures enum value "reward"
	DataExtractsTransactionCONTAINERReward string = "reward"

	// DataExtractsTransactionCONTAINERBill captures enum value "bill"
	DataExtractsTransactionCONTAINERBill string = "bill"

	// DataExtractsTransactionCONTAINERRealEstate captures enum value "realEstate"
	DataExtractsTransactionCONTAINERRealEstate string = "realEstate"

	// DataExtractsTransactionCONTAINEROtherAssets captures enum value "otherAssets"
	DataExtractsTransactionCONTAINEROtherAssets string = "otherAssets"

	// DataExtractsTransactionCONTAINEROtherLiabilities captures enum value "otherLiabilities"
	DataExtractsTransactionCONTAINEROtherLiabilities string = "otherLiabilities"
)

// prop value enum
func (m *DataExtractsTransaction) validateCONTAINEREnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeCONTAINERPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateCONTAINER(formats strfmt.Registry) error {

	if swag.IsZero(m.CONTAINER) { // not required
		return nil
	}

	// value enum
	if err := m.validateCONTAINEREnum("CONTAINER", "body", m.CONTAINER); err != nil {
		return err
	}

	return nil
}

func (m *DataExtractsTransaction) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

var dataExtractsTransactionTypeBaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREDIT","DEBIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeBaseTypePropEnum = append(dataExtractsTransactionTypeBaseTypePropEnum, v)
	}
}

const (

	// DataExtractsTransactionBaseTypeCREDIT captures enum value "CREDIT"
	DataExtractsTransactionBaseTypeCREDIT string = "CREDIT"

	// DataExtractsTransactionBaseTypeDEBIT captures enum value "DEBIT"
	DataExtractsTransactionBaseTypeDEBIT string = "DEBIT"
)

// prop value enum
func (m *DataExtractsTransaction) validateBaseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeBaseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateBaseType(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBaseTypeEnum("baseType", "body", m.BaseType); err != nil {
		return err
	}

	return nil
}

var dataExtractsTransactionTypeCategorySourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeCategorySourcePropEnum = append(dataExtractsTransactionTypeCategorySourcePropEnum, v)
	}
}

const (

	// DataExtractsTransactionCategorySourceSYSTEM captures enum value "SYSTEM"
	DataExtractsTransactionCategorySourceSYSTEM string = "SYSTEM"

	// DataExtractsTransactionCategorySourceUSER captures enum value "USER"
	DataExtractsTransactionCategorySourceUSER string = "USER"
)

// prop value enum
func (m *DataExtractsTransaction) validateCategorySourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeCategorySourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateCategorySource(formats strfmt.Registry) error {

	if swag.IsZero(m.CategorySource) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategorySourceEnum("categorySource", "body", m.CategorySource); err != nil {
		return err
	}

	return nil
}

var dataExtractsTransactionTypeCategoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TRANSFER","DEFERRED_COMPENSATION","UNCATEGORIZE","INCOME","EXPENSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeCategoryTypePropEnum = append(dataExtractsTransactionTypeCategoryTypePropEnum, v)
	}
}

const (

	// DataExtractsTransactionCategoryTypeTRANSFER captures enum value "TRANSFER"
	DataExtractsTransactionCategoryTypeTRANSFER string = "TRANSFER"

	// DataExtractsTransactionCategoryTypeDEFERREDCOMPENSATION captures enum value "DEFERRED_COMPENSATION"
	DataExtractsTransactionCategoryTypeDEFERREDCOMPENSATION string = "DEFERRED_COMPENSATION"

	// DataExtractsTransactionCategoryTypeUNCATEGORIZE captures enum value "UNCATEGORIZE"
	DataExtractsTransactionCategoryTypeUNCATEGORIZE string = "UNCATEGORIZE"

	// DataExtractsTransactionCategoryTypeINCOME captures enum value "INCOME"
	DataExtractsTransactionCategoryTypeINCOME string = "INCOME"

	// DataExtractsTransactionCategoryTypeEXPENSE captures enum value "EXPENSE"
	DataExtractsTransactionCategoryTypeEXPENSE string = "EXPENSE"
)

// prop value enum
func (m *DataExtractsTransaction) validateCategoryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeCategoryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateCategoryType(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryTypeEnum("categoryType", "body", m.CategoryType); err != nil {
		return err
	}

	return nil
}

func (m *DataExtractsTransaction) validateCommission(formats strfmt.Registry) error {

	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	if m.Commission != nil {
		if err := m.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *DataExtractsTransaction) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *DataExtractsTransaction) validateInterest(formats strfmt.Registry) error {

	if swag.IsZero(m.Interest) { // not required
		return nil
	}

	if m.Interest != nil {
		if err := m.Interest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interest")
			}
			return err
		}
	}

	return nil
}

func (m *DataExtractsTransaction) validateMerchant(formats strfmt.Registry) error {

	if swag.IsZero(m.Merchant) { // not required
		return nil
	}

	if m.Merchant != nil {
		if err := m.Merchant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchant")
			}
			return err
		}
	}

	return nil
}

func (m *DataExtractsTransaction) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *DataExtractsTransaction) validatePrincipal(formats strfmt.Registry) error {

	if swag.IsZero(m.Principal) { // not required
		return nil
	}

	if m.Principal != nil {
		if err := m.Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

func (m *DataExtractsTransaction) validateRunningBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningBalance) { // not required
		return nil
	}

	if m.RunningBalance != nil {
		if err := m.RunningBalance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runningBalance")
			}
			return err
		}
	}

	return nil
}

var dataExtractsTransactionTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGGREGATED","MANUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeSourceTypePropEnum = append(dataExtractsTransactionTypeSourceTypePropEnum, v)
	}
}

const (

	// DataExtractsTransactionSourceTypeAGGREGATED captures enum value "AGGREGATED"
	DataExtractsTransactionSourceTypeAGGREGATED string = "AGGREGATED"

	// DataExtractsTransactionSourceTypeMANUAL captures enum value "MANUAL"
	DataExtractsTransactionSourceTypeMANUAL string = "MANUAL"
)

// prop value enum
func (m *DataExtractsTransaction) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeSourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateSourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	return nil
}

var dataExtractsTransactionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["POSTED","PENDING","SCHEDULED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeStatusPropEnum = append(dataExtractsTransactionTypeStatusPropEnum, v)
	}
}

const (

	// DataExtractsTransactionStatusPOSTED captures enum value "POSTED"
	DataExtractsTransactionStatusPOSTED string = "POSTED"

	// DataExtractsTransactionStatusPENDING captures enum value "PENDING"
	DataExtractsTransactionStatusPENDING string = "PENDING"

	// DataExtractsTransactionStatusSCHEDULED captures enum value "SCHEDULED"
	DataExtractsTransactionStatusSCHEDULED string = "SCHEDULED"

	// DataExtractsTransactionStatusFAILED captures enum value "FAILED"
	DataExtractsTransactionStatusFAILED string = "FAILED"
)

// prop value enum
func (m *DataExtractsTransaction) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var dataExtractsTransactionTypeSubTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTH_HOLD","AUTH_REQUEST","OVERDRAFT_CHARGE","CREDIT_ADJUSTMENT","PIN_DEBIT","BANK_DIRECT_DEPOSIT","DIVIDEND_DEPOSIT","INTEREST_SAVINGS","INTEREST_ADJUSTMENT","ONLINE_PURCHASE","PURCHASED_WITH_CHECK","RECURRING_BILLING","TAX_PAYMENT","PAYMENT_BY_CHECK","PAYMENT_PLAN","FEE_REFUND","WIRE_TRANSFER_CHARGE","ACCOUNT_TO_ACCOUNT_TRANSFER","BANK_TO_BANK_TRANSACTION","BANK_TO_NON_BANK_ACCOUNT_TRANSFER","CASH_WITHDRAWAL_AT_FI","ATM_CASH_WITHDRAWAL","AUTH_PROCESSING","AUTH_RELEASE","PRE_AUTH","AUTH_COMPLETE","AUTH_VOID","BALANCE_ENQUIRY","ACCOUNT_VERIFICATION","PRE_AUTH_COMPLETION","SERVICE_CHARGE","SERVICE_CHARGE_FEE_REFUND","RETURNED_CHECK_CHARGE","RETURNED_CHECK_REIMBURSEMENT","CASH_ADVANCE","BILL_PAY_CHARGE","CHECK_IMAGE_SERVICE_CHARGE","OVERDRAFT_PROTECTION_CHARGE","STOP_PAYMENT_CHARGE","CHECKS_ORDERING_CHARGE","MONTHLY_MAINTENANCE_CHARGE","DEBIT_CARD_FEE","CONVENIENCE_FEE","PERSONAL_LOAN_CREDIT","CREDIT_CARD_CREDIT","AUTO_LOAN","HOME_LOAN_MORTGAGE","SHORT_TERM_CREDIT","SIGNATURE_DEBIT","CONTACT_LESS_DEBIT","DEFERRED_DEPOSIT","DEFERRED_BILL_PAY","INSTALLMENT_PAYMENT","RECURRING_SUBSCRIPTION_PAYMENT","HOLD_CHECK_PAYMENT","CAPITAL_GAINS_DISTIBUTION","CG_LONG_TERM_DEPOSIT","OPEN_SALE_DEPOSIT","INTEREST__CHECK","PURCHASE_VOID","PURCHASE_WITH_CREDIT_CARD","PURCHASE_WITH_DEBIT_CARD","CHARGE_A_REPEAT_CUSTOMER","DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT","FEE_PAYMENT","FINANCE_CHARGE_REFUND","TRANSACTION_VOID","FEE_VOID","DEBIT_CARD_WITHDRAWAL_AT_STORE","ELECTRONIC_PAYMENT","ACH_DEBIT","ATM_TELLER_DEPOSIT","POS_DEBIT","BANK_ADJUSTMENT","CHARGES_FEES","INTEREST","DEPOSITS_CREDITS","PAYMENT","PURCHASE","REFUND","TRANSFER","WITHDRAWAL","OTHER_DEPOSITS","OTHER_WITHDRAWALS","ADJUSTMENT","FINANCE_CHARGE","OTHER_CHARGES_FEES","ANNUAL_FEE","DEPOSIT","DIRECT_DEPOSIT_SALARY","INVESTMENT_INCOME_CASH","SSA","REWARDS","CHECK_DEPOSIT","MOBILE_REMOTE_DEPOSIT","TELLER_DEPOSIT","TAX_REFUND","CREDIT_CARD_PAYMENT","INSURANCE_PAYMENT","UTILITIES_PAYMENT","CHILD_SUPPORT","LOAN","PERSONAL_LOAN","STUDENT_LOAN","SALES_TAX","REIMBURSEMENT","BALANCE_TRANSFER","WIRE_TRANSFER","OVERDRAFT_PROTECTION","DEBIT","CREDIT","NSF_FEES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExtractsTransactionTypeSubTypePropEnum = append(dataExtractsTransactionTypeSubTypePropEnum, v)
	}
}

const (

	// DataExtractsTransactionSubTypeAUTHHOLD captures enum value "AUTH_HOLD"
	DataExtractsTransactionSubTypeAUTHHOLD string = "AUTH_HOLD"

	// DataExtractsTransactionSubTypeAUTHREQUEST captures enum value "AUTH_REQUEST"
	DataExtractsTransactionSubTypeAUTHREQUEST string = "AUTH_REQUEST"

	// DataExtractsTransactionSubTypeOVERDRAFTCHARGE captures enum value "OVERDRAFT_CHARGE"
	DataExtractsTransactionSubTypeOVERDRAFTCHARGE string = "OVERDRAFT_CHARGE"

	// DataExtractsTransactionSubTypeCREDITADJUSTMENT captures enum value "CREDIT_ADJUSTMENT"
	DataExtractsTransactionSubTypeCREDITADJUSTMENT string = "CREDIT_ADJUSTMENT"

	// DataExtractsTransactionSubTypePINDEBIT captures enum value "PIN_DEBIT"
	DataExtractsTransactionSubTypePINDEBIT string = "PIN_DEBIT"

	// DataExtractsTransactionSubTypeBANKDIRECTDEPOSIT captures enum value "BANK_DIRECT_DEPOSIT"
	DataExtractsTransactionSubTypeBANKDIRECTDEPOSIT string = "BANK_DIRECT_DEPOSIT"

	// DataExtractsTransactionSubTypeDIVIDENDDEPOSIT captures enum value "DIVIDEND_DEPOSIT"
	DataExtractsTransactionSubTypeDIVIDENDDEPOSIT string = "DIVIDEND_DEPOSIT"

	// DataExtractsTransactionSubTypeINTERESTSAVINGS captures enum value "INTEREST_SAVINGS"
	DataExtractsTransactionSubTypeINTERESTSAVINGS string = "INTEREST_SAVINGS"

	// DataExtractsTransactionSubTypeINTERESTADJUSTMENT captures enum value "INTEREST_ADJUSTMENT"
	DataExtractsTransactionSubTypeINTERESTADJUSTMENT string = "INTEREST_ADJUSTMENT"

	// DataExtractsTransactionSubTypeONLINEPURCHASE captures enum value "ONLINE_PURCHASE"
	DataExtractsTransactionSubTypeONLINEPURCHASE string = "ONLINE_PURCHASE"

	// DataExtractsTransactionSubTypePURCHASEDWITHCHECK captures enum value "PURCHASED_WITH_CHECK"
	DataExtractsTransactionSubTypePURCHASEDWITHCHECK string = "PURCHASED_WITH_CHECK"

	// DataExtractsTransactionSubTypeRECURRINGBILLING captures enum value "RECURRING_BILLING"
	DataExtractsTransactionSubTypeRECURRINGBILLING string = "RECURRING_BILLING"

	// DataExtractsTransactionSubTypeTAXPAYMENT captures enum value "TAX_PAYMENT"
	DataExtractsTransactionSubTypeTAXPAYMENT string = "TAX_PAYMENT"

	// DataExtractsTransactionSubTypePAYMENTBYCHECK captures enum value "PAYMENT_BY_CHECK"
	DataExtractsTransactionSubTypePAYMENTBYCHECK string = "PAYMENT_BY_CHECK"

	// DataExtractsTransactionSubTypePAYMENTPLAN captures enum value "PAYMENT_PLAN"
	DataExtractsTransactionSubTypePAYMENTPLAN string = "PAYMENT_PLAN"

	// DataExtractsTransactionSubTypeFEEREFUND captures enum value "FEE_REFUND"
	DataExtractsTransactionSubTypeFEEREFUND string = "FEE_REFUND"

	// DataExtractsTransactionSubTypeWIRETRANSFERCHARGE captures enum value "WIRE_TRANSFER_CHARGE"
	DataExtractsTransactionSubTypeWIRETRANSFERCHARGE string = "WIRE_TRANSFER_CHARGE"

	// DataExtractsTransactionSubTypeACCOUNTTOACCOUNTTRANSFER captures enum value "ACCOUNT_TO_ACCOUNT_TRANSFER"
	DataExtractsTransactionSubTypeACCOUNTTOACCOUNTTRANSFER string = "ACCOUNT_TO_ACCOUNT_TRANSFER"

	// DataExtractsTransactionSubTypeBANKTOBANKTRANSACTION captures enum value "BANK_TO_BANK_TRANSACTION"
	DataExtractsTransactionSubTypeBANKTOBANKTRANSACTION string = "BANK_TO_BANK_TRANSACTION"

	// DataExtractsTransactionSubTypeBANKTONONBANKACCOUNTTRANSFER captures enum value "BANK_TO_NON_BANK_ACCOUNT_TRANSFER"
	DataExtractsTransactionSubTypeBANKTONONBANKACCOUNTTRANSFER string = "BANK_TO_NON_BANK_ACCOUNT_TRANSFER"

	// DataExtractsTransactionSubTypeCASHWITHDRAWALATFI captures enum value "CASH_WITHDRAWAL_AT_FI"
	DataExtractsTransactionSubTypeCASHWITHDRAWALATFI string = "CASH_WITHDRAWAL_AT_FI"

	// DataExtractsTransactionSubTypeATMCASHWITHDRAWAL captures enum value "ATM_CASH_WITHDRAWAL"
	DataExtractsTransactionSubTypeATMCASHWITHDRAWAL string = "ATM_CASH_WITHDRAWAL"

	// DataExtractsTransactionSubTypeAUTHPROCESSING captures enum value "AUTH_PROCESSING"
	DataExtractsTransactionSubTypeAUTHPROCESSING string = "AUTH_PROCESSING"

	// DataExtractsTransactionSubTypeAUTHRELEASE captures enum value "AUTH_RELEASE"
	DataExtractsTransactionSubTypeAUTHRELEASE string = "AUTH_RELEASE"

	// DataExtractsTransactionSubTypePREAUTH captures enum value "PRE_AUTH"
	DataExtractsTransactionSubTypePREAUTH string = "PRE_AUTH"

	// DataExtractsTransactionSubTypeAUTHCOMPLETE captures enum value "AUTH_COMPLETE"
	DataExtractsTransactionSubTypeAUTHCOMPLETE string = "AUTH_COMPLETE"

	// DataExtractsTransactionSubTypeAUTHVOID captures enum value "AUTH_VOID"
	DataExtractsTransactionSubTypeAUTHVOID string = "AUTH_VOID"

	// DataExtractsTransactionSubTypeBALANCEENQUIRY captures enum value "BALANCE_ENQUIRY"
	DataExtractsTransactionSubTypeBALANCEENQUIRY string = "BALANCE_ENQUIRY"

	// DataExtractsTransactionSubTypeACCOUNTVERIFICATION captures enum value "ACCOUNT_VERIFICATION"
	DataExtractsTransactionSubTypeACCOUNTVERIFICATION string = "ACCOUNT_VERIFICATION"

	// DataExtractsTransactionSubTypePREAUTHCOMPLETION captures enum value "PRE_AUTH_COMPLETION"
	DataExtractsTransactionSubTypePREAUTHCOMPLETION string = "PRE_AUTH_COMPLETION"

	// DataExtractsTransactionSubTypeSERVICECHARGE captures enum value "SERVICE_CHARGE"
	DataExtractsTransactionSubTypeSERVICECHARGE string = "SERVICE_CHARGE"

	// DataExtractsTransactionSubTypeSERVICECHARGEFEEREFUND captures enum value "SERVICE_CHARGE_FEE_REFUND"
	DataExtractsTransactionSubTypeSERVICECHARGEFEEREFUND string = "SERVICE_CHARGE_FEE_REFUND"

	// DataExtractsTransactionSubTypeRETURNEDCHECKCHARGE captures enum value "RETURNED_CHECK_CHARGE"
	DataExtractsTransactionSubTypeRETURNEDCHECKCHARGE string = "RETURNED_CHECK_CHARGE"

	// DataExtractsTransactionSubTypeRETURNEDCHECKREIMBURSEMENT captures enum value "RETURNED_CHECK_REIMBURSEMENT"
	DataExtractsTransactionSubTypeRETURNEDCHECKREIMBURSEMENT string = "RETURNED_CHECK_REIMBURSEMENT"

	// DataExtractsTransactionSubTypeCASHADVANCE captures enum value "CASH_ADVANCE"
	DataExtractsTransactionSubTypeCASHADVANCE string = "CASH_ADVANCE"

	// DataExtractsTransactionSubTypeBILLPAYCHARGE captures enum value "BILL_PAY_CHARGE"
	DataExtractsTransactionSubTypeBILLPAYCHARGE string = "BILL_PAY_CHARGE"

	// DataExtractsTransactionSubTypeCHECKIMAGESERVICECHARGE captures enum value "CHECK_IMAGE_SERVICE_CHARGE"
	DataExtractsTransactionSubTypeCHECKIMAGESERVICECHARGE string = "CHECK_IMAGE_SERVICE_CHARGE"

	// DataExtractsTransactionSubTypeOVERDRAFTPROTECTIONCHARGE captures enum value "OVERDRAFT_PROTECTION_CHARGE"
	DataExtractsTransactionSubTypeOVERDRAFTPROTECTIONCHARGE string = "OVERDRAFT_PROTECTION_CHARGE"

	// DataExtractsTransactionSubTypeSTOPPAYMENTCHARGE captures enum value "STOP_PAYMENT_CHARGE"
	DataExtractsTransactionSubTypeSTOPPAYMENTCHARGE string = "STOP_PAYMENT_CHARGE"

	// DataExtractsTransactionSubTypeCHECKSORDERINGCHARGE captures enum value "CHECKS_ORDERING_CHARGE"
	DataExtractsTransactionSubTypeCHECKSORDERINGCHARGE string = "CHECKS_ORDERING_CHARGE"

	// DataExtractsTransactionSubTypeMONTHLYMAINTENANCECHARGE captures enum value "MONTHLY_MAINTENANCE_CHARGE"
	DataExtractsTransactionSubTypeMONTHLYMAINTENANCECHARGE string = "MONTHLY_MAINTENANCE_CHARGE"

	// DataExtractsTransactionSubTypeDEBITCARDFEE captures enum value "DEBIT_CARD_FEE"
	DataExtractsTransactionSubTypeDEBITCARDFEE string = "DEBIT_CARD_FEE"

	// DataExtractsTransactionSubTypeCONVENIENCEFEE captures enum value "CONVENIENCE_FEE"
	DataExtractsTransactionSubTypeCONVENIENCEFEE string = "CONVENIENCE_FEE"

	// DataExtractsTransactionSubTypePERSONALLOANCREDIT captures enum value "PERSONAL_LOAN_CREDIT"
	DataExtractsTransactionSubTypePERSONALLOANCREDIT string = "PERSONAL_LOAN_CREDIT"

	// DataExtractsTransactionSubTypeCREDITCARDCREDIT captures enum value "CREDIT_CARD_CREDIT"
	DataExtractsTransactionSubTypeCREDITCARDCREDIT string = "CREDIT_CARD_CREDIT"

	// DataExtractsTransactionSubTypeAUTOLOAN captures enum value "AUTO_LOAN"
	DataExtractsTransactionSubTypeAUTOLOAN string = "AUTO_LOAN"

	// DataExtractsTransactionSubTypeHOMELOANMORTGAGE captures enum value "HOME_LOAN_MORTGAGE"
	DataExtractsTransactionSubTypeHOMELOANMORTGAGE string = "HOME_LOAN_MORTGAGE"

	// DataExtractsTransactionSubTypeSHORTTERMCREDIT captures enum value "SHORT_TERM_CREDIT"
	DataExtractsTransactionSubTypeSHORTTERMCREDIT string = "SHORT_TERM_CREDIT"

	// DataExtractsTransactionSubTypeSIGNATUREDEBIT captures enum value "SIGNATURE_DEBIT"
	DataExtractsTransactionSubTypeSIGNATUREDEBIT string = "SIGNATURE_DEBIT"

	// DataExtractsTransactionSubTypeCONTACTLESSDEBIT captures enum value "CONTACT_LESS_DEBIT"
	DataExtractsTransactionSubTypeCONTACTLESSDEBIT string = "CONTACT_LESS_DEBIT"

	// DataExtractsTransactionSubTypeDEFERREDDEPOSIT captures enum value "DEFERRED_DEPOSIT"
	DataExtractsTransactionSubTypeDEFERREDDEPOSIT string = "DEFERRED_DEPOSIT"

	// DataExtractsTransactionSubTypeDEFERREDBILLPAY captures enum value "DEFERRED_BILL_PAY"
	DataExtractsTransactionSubTypeDEFERREDBILLPAY string = "DEFERRED_BILL_PAY"

	// DataExtractsTransactionSubTypeINSTALLMENTPAYMENT captures enum value "INSTALLMENT_PAYMENT"
	DataExtractsTransactionSubTypeINSTALLMENTPAYMENT string = "INSTALLMENT_PAYMENT"

	// DataExtractsTransactionSubTypeRECURRINGSUBSCRIPTIONPAYMENT captures enum value "RECURRING_SUBSCRIPTION_PAYMENT"
	DataExtractsTransactionSubTypeRECURRINGSUBSCRIPTIONPAYMENT string = "RECURRING_SUBSCRIPTION_PAYMENT"

	// DataExtractsTransactionSubTypeHOLDCHECKPAYMENT captures enum value "HOLD_CHECK_PAYMENT"
	DataExtractsTransactionSubTypeHOLDCHECKPAYMENT string = "HOLD_CHECK_PAYMENT"

	// DataExtractsTransactionSubTypeCAPITALGAINSDISTIBUTION captures enum value "CAPITAL_GAINS_DISTIBUTION"
	DataExtractsTransactionSubTypeCAPITALGAINSDISTIBUTION string = "CAPITAL_GAINS_DISTIBUTION"

	// DataExtractsTransactionSubTypeCGLONGTERMDEPOSIT captures enum value "CG_LONG_TERM_DEPOSIT"
	DataExtractsTransactionSubTypeCGLONGTERMDEPOSIT string = "CG_LONG_TERM_DEPOSIT"

	// DataExtractsTransactionSubTypeOPENSALEDEPOSIT captures enum value "OPEN_SALE_DEPOSIT"
	DataExtractsTransactionSubTypeOPENSALEDEPOSIT string = "OPEN_SALE_DEPOSIT"

	// DataExtractsTransactionSubTypeINTERESTCHECK captures enum value "INTEREST__CHECK"
	DataExtractsTransactionSubTypeINTERESTCHECK string = "INTEREST__CHECK"

	// DataExtractsTransactionSubTypePURCHASEVOID captures enum value "PURCHASE_VOID"
	DataExtractsTransactionSubTypePURCHASEVOID string = "PURCHASE_VOID"

	// DataExtractsTransactionSubTypePURCHASEWITHCREDITCARD captures enum value "PURCHASE_WITH_CREDIT_CARD"
	DataExtractsTransactionSubTypePURCHASEWITHCREDITCARD string = "PURCHASE_WITH_CREDIT_CARD"

	// DataExtractsTransactionSubTypePURCHASEWITHDEBITCARD captures enum value "PURCHASE_WITH_DEBIT_CARD"
	DataExtractsTransactionSubTypePURCHASEWITHDEBITCARD string = "PURCHASE_WITH_DEBIT_CARD"

	// DataExtractsTransactionSubTypeCHARGEAREPEATCUSTOMER captures enum value "CHARGE_A_REPEAT_CUSTOMER"
	DataExtractsTransactionSubTypeCHARGEAREPEATCUSTOMER string = "CHARGE_A_REPEAT_CUSTOMER"

	// DataExtractsTransactionSubTypeDOWNPAYMENTORANNUITYPAYMENTORDIRECTPAYMENT captures enum value "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT"
	DataExtractsTransactionSubTypeDOWNPAYMENTORANNUITYPAYMENTORDIRECTPAYMENT string = "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT"

	// DataExtractsTransactionSubTypeFEEPAYMENT captures enum value "FEE_PAYMENT"
	DataExtractsTransactionSubTypeFEEPAYMENT string = "FEE_PAYMENT"

	// DataExtractsTransactionSubTypeFINANCECHARGEREFUND captures enum value "FINANCE_CHARGE_REFUND"
	DataExtractsTransactionSubTypeFINANCECHARGEREFUND string = "FINANCE_CHARGE_REFUND"

	// DataExtractsTransactionSubTypeTRANSACTIONVOID captures enum value "TRANSACTION_VOID"
	DataExtractsTransactionSubTypeTRANSACTIONVOID string = "TRANSACTION_VOID"

	// DataExtractsTransactionSubTypeFEEVOID captures enum value "FEE_VOID"
	DataExtractsTransactionSubTypeFEEVOID string = "FEE_VOID"

	// DataExtractsTransactionSubTypeDEBITCARDWITHDRAWALATSTORE captures enum value "DEBIT_CARD_WITHDRAWAL_AT_STORE"
	DataExtractsTransactionSubTypeDEBITCARDWITHDRAWALATSTORE string = "DEBIT_CARD_WITHDRAWAL_AT_STORE"

	// DataExtractsTransactionSubTypeELECTRONICPAYMENT captures enum value "ELECTRONIC_PAYMENT"
	DataExtractsTransactionSubTypeELECTRONICPAYMENT string = "ELECTRONIC_PAYMENT"

	// DataExtractsTransactionSubTypeACHDEBIT captures enum value "ACH_DEBIT"
	DataExtractsTransactionSubTypeACHDEBIT string = "ACH_DEBIT"

	// DataExtractsTransactionSubTypeATMTELLERDEPOSIT captures enum value "ATM_TELLER_DEPOSIT"
	DataExtractsTransactionSubTypeATMTELLERDEPOSIT string = "ATM_TELLER_DEPOSIT"

	// DataExtractsTransactionSubTypePOSDEBIT captures enum value "POS_DEBIT"
	DataExtractsTransactionSubTypePOSDEBIT string = "POS_DEBIT"

	// DataExtractsTransactionSubTypeBANKADJUSTMENT captures enum value "BANK_ADJUSTMENT"
	DataExtractsTransactionSubTypeBANKADJUSTMENT string = "BANK_ADJUSTMENT"

	// DataExtractsTransactionSubTypeCHARGESFEES captures enum value "CHARGES_FEES"
	DataExtractsTransactionSubTypeCHARGESFEES string = "CHARGES_FEES"

	// DataExtractsTransactionSubTypeINTEREST captures enum value "INTEREST"
	DataExtractsTransactionSubTypeINTEREST string = "INTEREST"

	// DataExtractsTransactionSubTypeDEPOSITSCREDITS captures enum value "DEPOSITS_CREDITS"
	DataExtractsTransactionSubTypeDEPOSITSCREDITS string = "DEPOSITS_CREDITS"

	// DataExtractsTransactionSubTypePAYMENT captures enum value "PAYMENT"
	DataExtractsTransactionSubTypePAYMENT string = "PAYMENT"

	// DataExtractsTransactionSubTypePURCHASE captures enum value "PURCHASE"
	DataExtractsTransactionSubTypePURCHASE string = "PURCHASE"

	// DataExtractsTransactionSubTypeREFUND captures enum value "REFUND"
	DataExtractsTransactionSubTypeREFUND string = "REFUND"

	// DataExtractsTransactionSubTypeTRANSFER captures enum value "TRANSFER"
	DataExtractsTransactionSubTypeTRANSFER string = "TRANSFER"

	// DataExtractsTransactionSubTypeWITHDRAWAL captures enum value "WITHDRAWAL"
	DataExtractsTransactionSubTypeWITHDRAWAL string = "WITHDRAWAL"

	// DataExtractsTransactionSubTypeOTHERDEPOSITS captures enum value "OTHER_DEPOSITS"
	DataExtractsTransactionSubTypeOTHERDEPOSITS string = "OTHER_DEPOSITS"

	// DataExtractsTransactionSubTypeOTHERWITHDRAWALS captures enum value "OTHER_WITHDRAWALS"
	DataExtractsTransactionSubTypeOTHERWITHDRAWALS string = "OTHER_WITHDRAWALS"

	// DataExtractsTransactionSubTypeADJUSTMENT captures enum value "ADJUSTMENT"
	DataExtractsTransactionSubTypeADJUSTMENT string = "ADJUSTMENT"

	// DataExtractsTransactionSubTypeFINANCECHARGE captures enum value "FINANCE_CHARGE"
	DataExtractsTransactionSubTypeFINANCECHARGE string = "FINANCE_CHARGE"

	// DataExtractsTransactionSubTypeOTHERCHARGESFEES captures enum value "OTHER_CHARGES_FEES"
	DataExtractsTransactionSubTypeOTHERCHARGESFEES string = "OTHER_CHARGES_FEES"

	// DataExtractsTransactionSubTypeANNUALFEE captures enum value "ANNUAL_FEE"
	DataExtractsTransactionSubTypeANNUALFEE string = "ANNUAL_FEE"

	// DataExtractsTransactionSubTypeDEPOSIT captures enum value "DEPOSIT"
	DataExtractsTransactionSubTypeDEPOSIT string = "DEPOSIT"

	// DataExtractsTransactionSubTypeDIRECTDEPOSITSALARY captures enum value "DIRECT_DEPOSIT_SALARY"
	DataExtractsTransactionSubTypeDIRECTDEPOSITSALARY string = "DIRECT_DEPOSIT_SALARY"

	// DataExtractsTransactionSubTypeINVESTMENTINCOMECASH captures enum value "INVESTMENT_INCOME_CASH"
	DataExtractsTransactionSubTypeINVESTMENTINCOMECASH string = "INVESTMENT_INCOME_CASH"

	// DataExtractsTransactionSubTypeSSA captures enum value "SSA"
	DataExtractsTransactionSubTypeSSA string = "SSA"

	// DataExtractsTransactionSubTypeREWARDS captures enum value "REWARDS"
	DataExtractsTransactionSubTypeREWARDS string = "REWARDS"

	// DataExtractsTransactionSubTypeCHECKDEPOSIT captures enum value "CHECK_DEPOSIT"
	DataExtractsTransactionSubTypeCHECKDEPOSIT string = "CHECK_DEPOSIT"

	// DataExtractsTransactionSubTypeMOBILEREMOTEDEPOSIT captures enum value "MOBILE_REMOTE_DEPOSIT"
	DataExtractsTransactionSubTypeMOBILEREMOTEDEPOSIT string = "MOBILE_REMOTE_DEPOSIT"

	// DataExtractsTransactionSubTypeTELLERDEPOSIT captures enum value "TELLER_DEPOSIT"
	DataExtractsTransactionSubTypeTELLERDEPOSIT string = "TELLER_DEPOSIT"

	// DataExtractsTransactionSubTypeTAXREFUND captures enum value "TAX_REFUND"
	DataExtractsTransactionSubTypeTAXREFUND string = "TAX_REFUND"

	// DataExtractsTransactionSubTypeCREDITCARDPAYMENT captures enum value "CREDIT_CARD_PAYMENT"
	DataExtractsTransactionSubTypeCREDITCARDPAYMENT string = "CREDIT_CARD_PAYMENT"

	// DataExtractsTransactionSubTypeINSURANCEPAYMENT captures enum value "INSURANCE_PAYMENT"
	DataExtractsTransactionSubTypeINSURANCEPAYMENT string = "INSURANCE_PAYMENT"

	// DataExtractsTransactionSubTypeUTILITIESPAYMENT captures enum value "UTILITIES_PAYMENT"
	DataExtractsTransactionSubTypeUTILITIESPAYMENT string = "UTILITIES_PAYMENT"

	// DataExtractsTransactionSubTypeCHILDSUPPORT captures enum value "CHILD_SUPPORT"
	DataExtractsTransactionSubTypeCHILDSUPPORT string = "CHILD_SUPPORT"

	// DataExtractsTransactionSubTypeLOAN captures enum value "LOAN"
	DataExtractsTransactionSubTypeLOAN string = "LOAN"

	// DataExtractsTransactionSubTypePERSONALLOAN captures enum value "PERSONAL_LOAN"
	DataExtractsTransactionSubTypePERSONALLOAN string = "PERSONAL_LOAN"

	// DataExtractsTransactionSubTypeSTUDENTLOAN captures enum value "STUDENT_LOAN"
	DataExtractsTransactionSubTypeSTUDENTLOAN string = "STUDENT_LOAN"

	// DataExtractsTransactionSubTypeSALESTAX captures enum value "SALES_TAX"
	DataExtractsTransactionSubTypeSALESTAX string = "SALES_TAX"

	// DataExtractsTransactionSubTypeREIMBURSEMENT captures enum value "REIMBURSEMENT"
	DataExtractsTransactionSubTypeREIMBURSEMENT string = "REIMBURSEMENT"

	// DataExtractsTransactionSubTypeBALANCETRANSFER captures enum value "BALANCE_TRANSFER"
	DataExtractsTransactionSubTypeBALANCETRANSFER string = "BALANCE_TRANSFER"

	// DataExtractsTransactionSubTypeWIRETRANSFER captures enum value "WIRE_TRANSFER"
	DataExtractsTransactionSubTypeWIRETRANSFER string = "WIRE_TRANSFER"

	// DataExtractsTransactionSubTypeOVERDRAFTPROTECTION captures enum value "OVERDRAFT_PROTECTION"
	DataExtractsTransactionSubTypeOVERDRAFTPROTECTION string = "OVERDRAFT_PROTECTION"

	// DataExtractsTransactionSubTypeDEBIT captures enum value "DEBIT"
	DataExtractsTransactionSubTypeDEBIT string = "DEBIT"

	// DataExtractsTransactionSubTypeCREDIT captures enum value "CREDIT"
	DataExtractsTransactionSubTypeCREDIT string = "CREDIT"

	// DataExtractsTransactionSubTypeNSFFEES captures enum value "NSF_FEES"
	DataExtractsTransactionSubTypeNSFFEES string = "NSF_FEES"
)

// prop value enum
func (m *DataExtractsTransaction) validateSubTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataExtractsTransactionTypeSubTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataExtractsTransaction) validateSubType(formats strfmt.Registry) error {

	if swag.IsZero(m.SubType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubTypeEnum("subType", "body", m.SubType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataExtractsTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataExtractsTransaction) UnmarshalBinary(b []byte) error {
	var res DataExtractsTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
