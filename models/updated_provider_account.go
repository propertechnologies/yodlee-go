// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatedProviderAccount UpdatedProviderAccount
// swagger:model UpdatedProviderAccount
type UpdatedProviderAccount struct {

	// The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
	// * SYSTEM: Accounts that are pre-populated by the customers on behalf of their users in to the Yodlee system.<br>
	// * USER: Accounts that are added by the user.<br>
	// Read Only: true
	// Enum: [SYSTEM USER]
	AggregationSource string `json:"aggregationSource,omitempty"`

	// The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	CreatedDate string `json:"createdDate,omitempty"`

	// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	Dataset []*AccountDataset `json:"dataset"`

	// Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	IsManual *bool `json:"isManual,omitempty"`

	// This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	LoginForm []*LoginForm `json:"loginForm"`

	// Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	ProviderID int64 `json:"providerId,omitempty"`

	// Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
	// Read Only: true
	RequestID string `json:"requestId,omitempty"`

	// The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
	// * LOGIN_IN_PROGRESS: Login to provider site is in progress.<br>
	// * USER_INPUT_REQUIRED: Additional authentication information is needed from the user.<br>
	// * IN_PROGRESS: Login is successful and data aggregation is in progress.<br>
	// * PARTIAL_SUCCESS: Data is partially retrieved.<br>
	// * SUCCESS: Data is retrieved successfully.<br>
	// * FAILED: Additional authentication information is needed from the user.<br>
	// Read Only: true
	// Enum: [LOGIN_IN_PROGRESS USER_INPUT_REQUIRED IN_PROGRESS PARTIAL_SUCCESS SUCCESS FAILED]
	Status string `json:"status,omitempty"`
}

// Validate validates this updated provider account
func (m *UpdatedProviderAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updatedProviderAccountTypeAggregationSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updatedProviderAccountTypeAggregationSourcePropEnum = append(updatedProviderAccountTypeAggregationSourcePropEnum, v)
	}
}

const (

	// UpdatedProviderAccountAggregationSourceSYSTEM captures enum value "SYSTEM"
	UpdatedProviderAccountAggregationSourceSYSTEM string = "SYSTEM"

	// UpdatedProviderAccountAggregationSourceUSER captures enum value "USER"
	UpdatedProviderAccountAggregationSourceUSER string = "USER"
)

// prop value enum
func (m *UpdatedProviderAccount) validateAggregationSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updatedProviderAccountTypeAggregationSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdatedProviderAccount) validateAggregationSource(formats strfmt.Registry) error {

	if swag.IsZero(m.AggregationSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateAggregationSourceEnum("aggregationSource", "body", m.AggregationSource); err != nil {
		return err
	}

	return nil
}

func (m *UpdatedProviderAccount) validateDataset(formats strfmt.Registry) error {

	if swag.IsZero(m.Dataset) { // not required
		return nil
	}

	for i := 0; i < len(m.Dataset); i++ {
		if swag.IsZero(m.Dataset[i]) { // not required
			continue
		}

		if m.Dataset[i] != nil {
			if err := m.Dataset[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataset" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdatedProviderAccount) validateLoginForm(formats strfmt.Registry) error {

	if swag.IsZero(m.LoginForm) { // not required
		return nil
	}

	for i := 0; i < len(m.LoginForm); i++ {
		if swag.IsZero(m.LoginForm[i]) { // not required
			continue
		}

		if m.LoginForm[i] != nil {
			if err := m.LoginForm[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loginForm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updatedProviderAccountTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOGIN_IN_PROGRESS","USER_INPUT_REQUIRED","IN_PROGRESS","PARTIAL_SUCCESS","SUCCESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updatedProviderAccountTypeStatusPropEnum = append(updatedProviderAccountTypeStatusPropEnum, v)
	}
}

const (

	// UpdatedProviderAccountStatusLOGININPROGRESS captures enum value "LOGIN_IN_PROGRESS"
	UpdatedProviderAccountStatusLOGININPROGRESS string = "LOGIN_IN_PROGRESS"

	// UpdatedProviderAccountStatusUSERINPUTREQUIRED captures enum value "USER_INPUT_REQUIRED"
	UpdatedProviderAccountStatusUSERINPUTREQUIRED string = "USER_INPUT_REQUIRED"

	// UpdatedProviderAccountStatusINPROGRESS captures enum value "IN_PROGRESS"
	UpdatedProviderAccountStatusINPROGRESS string = "IN_PROGRESS"

	// UpdatedProviderAccountStatusPARTIALSUCCESS captures enum value "PARTIAL_SUCCESS"
	UpdatedProviderAccountStatusPARTIALSUCCESS string = "PARTIAL_SUCCESS"

	// UpdatedProviderAccountStatusSUCCESS captures enum value "SUCCESS"
	UpdatedProviderAccountStatusSUCCESS string = "SUCCESS"

	// UpdatedProviderAccountStatusFAILED captures enum value "FAILED"
	UpdatedProviderAccountStatusFAILED string = "FAILED"
)

// prop value enum
func (m *UpdatedProviderAccount) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updatedProviderAccountTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdatedProviderAccount) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatedProviderAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatedProviderAccount) UnmarshalBinary(b []byte) error {
	var res UpdatedProviderAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
