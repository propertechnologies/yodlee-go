// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction Transaction
// swagger:model Transaction
type Transaction struct {

	// The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * bank: Applicable for Aggregated and Manual<br>
	// * creditCard: Applicable for Aggregated and Manual<br>
	// * investment: Applicable for Aggregated and Manual<br>
	// * insurance: Applicable for Aggregated and Manual<br>
	// * loan: Applicable for Aggregated and Manual<br>
	// * reward: Applicable for Aggregated and Manual<br>
	// * bill: Applicable for Aggregated and Manual<br>
	// * realEstate: Applicable for Manual<br>
	// * otherAssets: Applicable for Manual<br>
	// * otherLiabilities: Applicable for Manual
	// Read Only: true
	// Enum: [bank creditCard investment insurance loan reward bill realEstate otherAssets otherLiabilities]
	CONTAINER string `json:"CONTAINER,omitempty"`

	// The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	AccountID int64 `json:"accountId,omitempty"`

	// The amount of the transaction as it appears at the FI site. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Amount *Money `json:"amount,omitempty"`

	// Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * CREDIT: Denotes that the transactions are being credited to the account.<br>
	// * DEBIT: Denotes that the transactions are getting debited to the account.<br>
	// Read Only: true
	// Enum: [CREDIT DEBIT]
	BaseType string `json:"baseType,omitempty"`

	// The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Category string `json:"category,omitempty"`

	// The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	CategoryID int64 `json:"categoryId,omitempty"`

	// Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * SYSTEM: The category assigned to the transaction is a system defined category.<br>
	// * USER: The category assigned to the transaction is a user defined category.<br>
	// Read Only: true
	// Enum: [SYSTEM USER]
	CategorySource string `json:"categorySource,omitempty"`

	// The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// * TRANSFER: The transaction category belongs to a transfer category type.<br>
	// * DEFERRED_COMPENSATION: The transaction category belongs to deferred compensation type.<br>
	// * UNCATEGORIZE: The transaction does not seem to be categorized.<br>
	// * INCOME: The transaction category belongs to an income type.<br>
	// * EXPENSE: The transaction category belongs to an expense type.<br>
	// Read Only: true
	// Enum: [TRANSFER DEFERRED_COMPENSATION UNCATEGORIZE INCOME EXPENSE]
	CategoryType string `json:"categoryType,omitempty"`

	// The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>
	// Read Only: true
	CheckNumber string `json:"checkNumber,omitempty"`

	// A commission or brokerage associated with a transaction.<br><br><br><b>Additional Details</b>:The commission only applies to trade-related transactions.<b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Commission *Money `json:"commission,omitempty"`

	// created date
	// Read Only: true
	CreatedDate string `json:"createdDate,omitempty"`

	// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	CusipNumber string `json:"cusipNumber,omitempty"`

	// The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Date string `json:"date,omitempty"`

	// Description details<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Description *Description `json:"description,omitempty"`

	// The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>
	// Read Only: true
	DetailCategoryID int64 `json:"detailCategoryId,omitempty"`

	// The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	HighLevelCategoryID int64 `json:"highLevelCategoryId,omitempty"`

	// For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	HoldingDescription string `json:"holdingDescription,omitempty"`

	// An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// The portion of interest in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>
	// Read Only: true
	Interest *Money `json:"interest,omitempty"`

	// Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	IsManual *bool `json:"isManual,omitempty"`

	// last updated
	// Read Only: true
	LastUpdated string `json:"lastUpdated,omitempty"`

	// Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Memo string `json:"memo,omitempty"`

	// The name of the merchant associated with the transaction.<br><b>Note</b>: The merchant name field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	Merchant *Merchant `json:"merchant,omitempty"`

	// The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	ParentCategoryID int64 `json:"parentCategoryId,omitempty"`

	// The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>
	// Read Only: true
	PostDate string `json:"postDate,omitempty"`

	// The price of the security for the transaction.<br><b>Note</b>: The price field applies only to the trade related transactions. <br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	Price *Money `json:"price,omitempty"`

	// The portion of the principal in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>
	// Read Only: true
	Principal *Money `json:"principal,omitempty"`

	// The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	Quantity float64 `json:"quantity,omitempty"`

	// The running balance in an account indicates the balance of the account after every transaction.<br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
	// Read Only: true
	RunningBalance *Money `json:"runningBalance,omitempty"`

	// It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	SettleDate string `json:"settleDate,omitempty"`

	// The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>
	// * AGGREGATED: Indicates that the transactions is aggregated from the provider site.<br>
	// * MANUAL: Indicates that the transaction is created manually by the user.<br>
	// Read Only: true
	// Enum: [AGGREGATED MANUAL]
	SourceType string `json:"sourceType,omitempty"`

	// The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
	// * POSTED: Denotes that the transaction is realized on the account's balance.<br>
	// * PENDING: Denotes that the transaction is not yet realized on the account's balance.<br>
	// * SCHEDULED: Denotes that the transacation is a future dated transaction.<br>
	// * FAILED: Denotes the failed transactions. It is only applicable to rejected claims in a Flexible Spending account.<br>
	// Read Only: true
	// Enum: [POSTED PENDING SCHEDULED FAILED]
	Status string `json:"status,omitempty"`

	// The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	// Enum: [AUTH_HOLD AUTH_REQUEST OVERDRAFT_CHARGE CREDIT_ADJUSTMENT PIN_DEBIT BANK_DIRECT_DEPOSIT DIVIDEND_DEPOSIT INTEREST_SAVINGS INTEREST_ADJUSTMENT ONLINE_PURCHASE PURCHASED_WITH_CHECK RECURRING_BILLING TAX_PAYMENT PAYMENT_BY_CHECK PAYMENT_PLAN FEE_REFUND WIRE_TRANSFER_CHARGE ACCOUNT_TO_ACCOUNT_TRANSFER BANK_TO_BANK_TRANSACTION BANK_TO_NON_BANK_ACCOUNT_TRANSFER CASH_WITHDRAWAL_AT_FI ATM_CASH_WITHDRAWAL AUTH_PROCESSING AUTH_RELEASE PRE_AUTH AUTH_COMPLETE AUTH_VOID BALANCE_ENQUIRY ACCOUNT_VERIFICATION PRE_AUTH_COMPLETION SERVICE_CHARGE SERVICE_CHARGE_FEE_REFUND RETURNED_CHECK_CHARGE RETURNED_CHECK_REIMBURSEMENT CASH_ADVANCE BILL_PAY_CHARGE CHECK_IMAGE_SERVICE_CHARGE OVERDRAFT_PROTECTION_CHARGE STOP_PAYMENT_CHARGE CHECKS_ORDERING_CHARGE MONTHLY_MAINTENANCE_CHARGE DEBIT_CARD_FEE CONVENIENCE_FEE PERSONAL_LOAN_CREDIT CREDIT_CARD_CREDIT AUTO_LOAN HOME_LOAN_MORTGAGE SHORT_TERM_CREDIT SIGNATURE_DEBIT CONTACT_LESS_DEBIT DEFERRED_DEPOSIT DEFERRED_BILL_PAY INSTALLMENT_PAYMENT RECURRING_SUBSCRIPTION_PAYMENT HOLD_CHECK_PAYMENT CAPITAL_GAINS_DISTIBUTION CG_LONG_TERM_DEPOSIT OPEN_SALE_DEPOSIT INTEREST__CHECK PURCHASE_VOID PURCHASE_WITH_CREDIT_CARD PURCHASE_WITH_DEBIT_CARD CHARGE_A_REPEAT_CUSTOMER DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT FEE_PAYMENT FINANCE_CHARGE_REFUND TRANSACTION_VOID FEE_VOID DEBIT_CARD_WITHDRAWAL_AT_STORE ELECTRONIC_PAYMENT ACH_DEBIT ATM_TELLER_DEPOSIT POS_DEBIT BANK_ADJUSTMENT CHARGES_FEES INTEREST DEPOSITS_CREDITS PAYMENT PURCHASE REFUND TRANSFER WITHDRAWAL OTHER_DEPOSITS OTHER_WITHDRAWALS ADJUSTMENT FINANCE_CHARGE OTHER_CHARGES_FEES ANNUAL_FEE DEPOSIT DIRECT_DEPOSIT_SALARY INVESTMENT_INCOME_CASH SSA REWARDS CHECK_DEPOSIT MOBILE_REMOTE_DEPOSIT TELLER_DEPOSIT TAX_REFUND CREDIT_CARD_PAYMENT INSURANCE_PAYMENT UTILITIES_PAYMENT CHILD_SUPPORT LOAN PERSONAL_LOAN STUDENT_LOAN SALES_TAX REIMBURSEMENT BALANCE_TRANSFER WIRE_TRANSFER OVERDRAFT_PROTECTION DEBIT CREDIT NSF_FEES]
	SubType string `json:"subType,omitempty"`

	// The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>
	// Read Only: true
	Symbol string `json:"symbol,omitempty"`

	// The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
	// Read Only: true
	TransactionDate string `json:"transactionDate,omitempty"`

	// The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCONTAINER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategorySource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transactionTypeCONTAINERPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bank","creditCard","investment","insurance","loan","reward","bill","realEstate","otherAssets","otherLiabilities"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeCONTAINERPropEnum = append(transactionTypeCONTAINERPropEnum, v)
	}
}

const (

	// TransactionCONTAINERBank captures enum value "bank"
	TransactionCONTAINERBank string = "bank"

	// TransactionCONTAINERCreditCard captures enum value "creditCard"
	TransactionCONTAINERCreditCard string = "creditCard"

	// TransactionCONTAINERInvestment captures enum value "investment"
	TransactionCONTAINERInvestment string = "investment"

	// TransactionCONTAINERInsurance captures enum value "insurance"
	TransactionCONTAINERInsurance string = "insurance"

	// TransactionCONTAINERLoan captures enum value "loan"
	TransactionCONTAINERLoan string = "loan"

	// TransactionCONTAINERReward captures enum value "reward"
	TransactionCONTAINERReward string = "reward"

	// TransactionCONTAINERBill captures enum value "bill"
	TransactionCONTAINERBill string = "bill"

	// TransactionCONTAINERRealEstate captures enum value "realEstate"
	TransactionCONTAINERRealEstate string = "realEstate"

	// TransactionCONTAINEROtherAssets captures enum value "otherAssets"
	TransactionCONTAINEROtherAssets string = "otherAssets"

	// TransactionCONTAINEROtherLiabilities captures enum value "otherLiabilities"
	TransactionCONTAINEROtherLiabilities string = "otherLiabilities"
)

// prop value enum
func (m *Transaction) validateCONTAINEREnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeCONTAINERPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateCONTAINER(formats strfmt.Registry) error {

	if swag.IsZero(m.CONTAINER) { // not required
		return nil
	}

	// value enum
	if err := m.validateCONTAINEREnum("CONTAINER", "body", m.CONTAINER); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

var transactionTypeBaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREDIT","DEBIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeBaseTypePropEnum = append(transactionTypeBaseTypePropEnum, v)
	}
}

const (

	// TransactionBaseTypeCREDIT captures enum value "CREDIT"
	TransactionBaseTypeCREDIT string = "CREDIT"

	// TransactionBaseTypeDEBIT captures enum value "DEBIT"
	TransactionBaseTypeDEBIT string = "DEBIT"
)

// prop value enum
func (m *Transaction) validateBaseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeBaseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateBaseType(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBaseTypeEnum("baseType", "body", m.BaseType); err != nil {
		return err
	}

	return nil
}

var transactionTypeCategorySourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYSTEM","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeCategorySourcePropEnum = append(transactionTypeCategorySourcePropEnum, v)
	}
}

const (

	// TransactionCategorySourceSYSTEM captures enum value "SYSTEM"
	TransactionCategorySourceSYSTEM string = "SYSTEM"

	// TransactionCategorySourceUSER captures enum value "USER"
	TransactionCategorySourceUSER string = "USER"
)

// prop value enum
func (m *Transaction) validateCategorySourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeCategorySourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateCategorySource(formats strfmt.Registry) error {

	if swag.IsZero(m.CategorySource) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategorySourceEnum("categorySource", "body", m.CategorySource); err != nil {
		return err
	}

	return nil
}

var transactionTypeCategoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TRANSFER","DEFERRED_COMPENSATION","UNCATEGORIZE","INCOME","EXPENSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeCategoryTypePropEnum = append(transactionTypeCategoryTypePropEnum, v)
	}
}

const (

	// TransactionCategoryTypeTRANSFER captures enum value "TRANSFER"
	TransactionCategoryTypeTRANSFER string = "TRANSFER"

	// TransactionCategoryTypeDEFERREDCOMPENSATION captures enum value "DEFERRED_COMPENSATION"
	TransactionCategoryTypeDEFERREDCOMPENSATION string = "DEFERRED_COMPENSATION"

	// TransactionCategoryTypeUNCATEGORIZE captures enum value "UNCATEGORIZE"
	TransactionCategoryTypeUNCATEGORIZE string = "UNCATEGORIZE"

	// TransactionCategoryTypeINCOME captures enum value "INCOME"
	TransactionCategoryTypeINCOME string = "INCOME"

	// TransactionCategoryTypeEXPENSE captures enum value "EXPENSE"
	TransactionCategoryTypeEXPENSE string = "EXPENSE"
)

// prop value enum
func (m *Transaction) validateCategoryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeCategoryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateCategoryType(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryTypeEnum("categoryType", "body", m.CategoryType); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateCommission(formats strfmt.Registry) error {

	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	if m.Commission != nil {
		if err := m.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateInterest(formats strfmt.Registry) error {

	if swag.IsZero(m.Interest) { // not required
		return nil
	}

	if m.Interest != nil {
		if err := m.Interest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interest")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateMerchant(formats strfmt.Registry) error {

	if swag.IsZero(m.Merchant) { // not required
		return nil
	}

	if m.Merchant != nil {
		if err := m.Merchant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchant")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validatePrincipal(formats strfmt.Registry) error {

	if swag.IsZero(m.Principal) { // not required
		return nil
	}

	if m.Principal != nil {
		if err := m.Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateRunningBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningBalance) { // not required
		return nil
	}

	if m.RunningBalance != nil {
		if err := m.RunningBalance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runningBalance")
			}
			return err
		}
	}

	return nil
}

var transactionTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGGREGATED","MANUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeSourceTypePropEnum = append(transactionTypeSourceTypePropEnum, v)
	}
}

const (

	// TransactionSourceTypeAGGREGATED captures enum value "AGGREGATED"
	TransactionSourceTypeAGGREGATED string = "AGGREGATED"

	// TransactionSourceTypeMANUAL captures enum value "MANUAL"
	TransactionSourceTypeMANUAL string = "MANUAL"
)

// prop value enum
func (m *Transaction) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeSourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateSourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	return nil
}

var transactionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["POSTED","PENDING","SCHEDULED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeStatusPropEnum = append(transactionTypeStatusPropEnum, v)
	}
}

const (

	// TransactionStatusPOSTED captures enum value "POSTED"
	TransactionStatusPOSTED string = "POSTED"

	// TransactionStatusPENDING captures enum value "PENDING"
	TransactionStatusPENDING string = "PENDING"

	// TransactionStatusSCHEDULED captures enum value "SCHEDULED"
	TransactionStatusSCHEDULED string = "SCHEDULED"

	// TransactionStatusFAILED captures enum value "FAILED"
	TransactionStatusFAILED string = "FAILED"
)

// prop value enum
func (m *Transaction) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var transactionTypeSubTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTH_HOLD","AUTH_REQUEST","OVERDRAFT_CHARGE","CREDIT_ADJUSTMENT","PIN_DEBIT","BANK_DIRECT_DEPOSIT","DIVIDEND_DEPOSIT","INTEREST_SAVINGS","INTEREST_ADJUSTMENT","ONLINE_PURCHASE","PURCHASED_WITH_CHECK","RECURRING_BILLING","TAX_PAYMENT","PAYMENT_BY_CHECK","PAYMENT_PLAN","FEE_REFUND","WIRE_TRANSFER_CHARGE","ACCOUNT_TO_ACCOUNT_TRANSFER","BANK_TO_BANK_TRANSACTION","BANK_TO_NON_BANK_ACCOUNT_TRANSFER","CASH_WITHDRAWAL_AT_FI","ATM_CASH_WITHDRAWAL","AUTH_PROCESSING","AUTH_RELEASE","PRE_AUTH","AUTH_COMPLETE","AUTH_VOID","BALANCE_ENQUIRY","ACCOUNT_VERIFICATION","PRE_AUTH_COMPLETION","SERVICE_CHARGE","SERVICE_CHARGE_FEE_REFUND","RETURNED_CHECK_CHARGE","RETURNED_CHECK_REIMBURSEMENT","CASH_ADVANCE","BILL_PAY_CHARGE","CHECK_IMAGE_SERVICE_CHARGE","OVERDRAFT_PROTECTION_CHARGE","STOP_PAYMENT_CHARGE","CHECKS_ORDERING_CHARGE","MONTHLY_MAINTENANCE_CHARGE","DEBIT_CARD_FEE","CONVENIENCE_FEE","PERSONAL_LOAN_CREDIT","CREDIT_CARD_CREDIT","AUTO_LOAN","HOME_LOAN_MORTGAGE","SHORT_TERM_CREDIT","SIGNATURE_DEBIT","CONTACT_LESS_DEBIT","DEFERRED_DEPOSIT","DEFERRED_BILL_PAY","INSTALLMENT_PAYMENT","RECURRING_SUBSCRIPTION_PAYMENT","HOLD_CHECK_PAYMENT","CAPITAL_GAINS_DISTIBUTION","CG_LONG_TERM_DEPOSIT","OPEN_SALE_DEPOSIT","INTEREST__CHECK","PURCHASE_VOID","PURCHASE_WITH_CREDIT_CARD","PURCHASE_WITH_DEBIT_CARD","CHARGE_A_REPEAT_CUSTOMER","DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT","FEE_PAYMENT","FINANCE_CHARGE_REFUND","TRANSACTION_VOID","FEE_VOID","DEBIT_CARD_WITHDRAWAL_AT_STORE","ELECTRONIC_PAYMENT","ACH_DEBIT","ATM_TELLER_DEPOSIT","POS_DEBIT","BANK_ADJUSTMENT","CHARGES_FEES","INTEREST","DEPOSITS_CREDITS","PAYMENT","PURCHASE","REFUND","TRANSFER","WITHDRAWAL","OTHER_DEPOSITS","OTHER_WITHDRAWALS","ADJUSTMENT","FINANCE_CHARGE","OTHER_CHARGES_FEES","ANNUAL_FEE","DEPOSIT","DIRECT_DEPOSIT_SALARY","INVESTMENT_INCOME_CASH","SSA","REWARDS","CHECK_DEPOSIT","MOBILE_REMOTE_DEPOSIT","TELLER_DEPOSIT","TAX_REFUND","CREDIT_CARD_PAYMENT","INSURANCE_PAYMENT","UTILITIES_PAYMENT","CHILD_SUPPORT","LOAN","PERSONAL_LOAN","STUDENT_LOAN","SALES_TAX","REIMBURSEMENT","BALANCE_TRANSFER","WIRE_TRANSFER","OVERDRAFT_PROTECTION","DEBIT","CREDIT","NSF_FEES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeSubTypePropEnum = append(transactionTypeSubTypePropEnum, v)
	}
}

const (

	// TransactionSubTypeAUTHHOLD captures enum value "AUTH_HOLD"
	TransactionSubTypeAUTHHOLD string = "AUTH_HOLD"

	// TransactionSubTypeAUTHREQUEST captures enum value "AUTH_REQUEST"
	TransactionSubTypeAUTHREQUEST string = "AUTH_REQUEST"

	// TransactionSubTypeOVERDRAFTCHARGE captures enum value "OVERDRAFT_CHARGE"
	TransactionSubTypeOVERDRAFTCHARGE string = "OVERDRAFT_CHARGE"

	// TransactionSubTypeCREDITADJUSTMENT captures enum value "CREDIT_ADJUSTMENT"
	TransactionSubTypeCREDITADJUSTMENT string = "CREDIT_ADJUSTMENT"

	// TransactionSubTypePINDEBIT captures enum value "PIN_DEBIT"
	TransactionSubTypePINDEBIT string = "PIN_DEBIT"

	// TransactionSubTypeBANKDIRECTDEPOSIT captures enum value "BANK_DIRECT_DEPOSIT"
	TransactionSubTypeBANKDIRECTDEPOSIT string = "BANK_DIRECT_DEPOSIT"

	// TransactionSubTypeDIVIDENDDEPOSIT captures enum value "DIVIDEND_DEPOSIT"
	TransactionSubTypeDIVIDENDDEPOSIT string = "DIVIDEND_DEPOSIT"

	// TransactionSubTypeINTERESTSAVINGS captures enum value "INTEREST_SAVINGS"
	TransactionSubTypeINTERESTSAVINGS string = "INTEREST_SAVINGS"

	// TransactionSubTypeINTERESTADJUSTMENT captures enum value "INTEREST_ADJUSTMENT"
	TransactionSubTypeINTERESTADJUSTMENT string = "INTEREST_ADJUSTMENT"

	// TransactionSubTypeONLINEPURCHASE captures enum value "ONLINE_PURCHASE"
	TransactionSubTypeONLINEPURCHASE string = "ONLINE_PURCHASE"

	// TransactionSubTypePURCHASEDWITHCHECK captures enum value "PURCHASED_WITH_CHECK"
	TransactionSubTypePURCHASEDWITHCHECK string = "PURCHASED_WITH_CHECK"

	// TransactionSubTypeRECURRINGBILLING captures enum value "RECURRING_BILLING"
	TransactionSubTypeRECURRINGBILLING string = "RECURRING_BILLING"

	// TransactionSubTypeTAXPAYMENT captures enum value "TAX_PAYMENT"
	TransactionSubTypeTAXPAYMENT string = "TAX_PAYMENT"

	// TransactionSubTypePAYMENTBYCHECK captures enum value "PAYMENT_BY_CHECK"
	TransactionSubTypePAYMENTBYCHECK string = "PAYMENT_BY_CHECK"

	// TransactionSubTypePAYMENTPLAN captures enum value "PAYMENT_PLAN"
	TransactionSubTypePAYMENTPLAN string = "PAYMENT_PLAN"

	// TransactionSubTypeFEEREFUND captures enum value "FEE_REFUND"
	TransactionSubTypeFEEREFUND string = "FEE_REFUND"

	// TransactionSubTypeWIRETRANSFERCHARGE captures enum value "WIRE_TRANSFER_CHARGE"
	TransactionSubTypeWIRETRANSFERCHARGE string = "WIRE_TRANSFER_CHARGE"

	// TransactionSubTypeACCOUNTTOACCOUNTTRANSFER captures enum value "ACCOUNT_TO_ACCOUNT_TRANSFER"
	TransactionSubTypeACCOUNTTOACCOUNTTRANSFER string = "ACCOUNT_TO_ACCOUNT_TRANSFER"

	// TransactionSubTypeBANKTOBANKTRANSACTION captures enum value "BANK_TO_BANK_TRANSACTION"
	TransactionSubTypeBANKTOBANKTRANSACTION string = "BANK_TO_BANK_TRANSACTION"

	// TransactionSubTypeBANKTONONBANKACCOUNTTRANSFER captures enum value "BANK_TO_NON_BANK_ACCOUNT_TRANSFER"
	TransactionSubTypeBANKTONONBANKACCOUNTTRANSFER string = "BANK_TO_NON_BANK_ACCOUNT_TRANSFER"

	// TransactionSubTypeCASHWITHDRAWALATFI captures enum value "CASH_WITHDRAWAL_AT_FI"
	TransactionSubTypeCASHWITHDRAWALATFI string = "CASH_WITHDRAWAL_AT_FI"

	// TransactionSubTypeATMCASHWITHDRAWAL captures enum value "ATM_CASH_WITHDRAWAL"
	TransactionSubTypeATMCASHWITHDRAWAL string = "ATM_CASH_WITHDRAWAL"

	// TransactionSubTypeAUTHPROCESSING captures enum value "AUTH_PROCESSING"
	TransactionSubTypeAUTHPROCESSING string = "AUTH_PROCESSING"

	// TransactionSubTypeAUTHRELEASE captures enum value "AUTH_RELEASE"
	TransactionSubTypeAUTHRELEASE string = "AUTH_RELEASE"

	// TransactionSubTypePREAUTH captures enum value "PRE_AUTH"
	TransactionSubTypePREAUTH string = "PRE_AUTH"

	// TransactionSubTypeAUTHCOMPLETE captures enum value "AUTH_COMPLETE"
	TransactionSubTypeAUTHCOMPLETE string = "AUTH_COMPLETE"

	// TransactionSubTypeAUTHVOID captures enum value "AUTH_VOID"
	TransactionSubTypeAUTHVOID string = "AUTH_VOID"

	// TransactionSubTypeBALANCEENQUIRY captures enum value "BALANCE_ENQUIRY"
	TransactionSubTypeBALANCEENQUIRY string = "BALANCE_ENQUIRY"

	// TransactionSubTypeACCOUNTVERIFICATION captures enum value "ACCOUNT_VERIFICATION"
	TransactionSubTypeACCOUNTVERIFICATION string = "ACCOUNT_VERIFICATION"

	// TransactionSubTypePREAUTHCOMPLETION captures enum value "PRE_AUTH_COMPLETION"
	TransactionSubTypePREAUTHCOMPLETION string = "PRE_AUTH_COMPLETION"

	// TransactionSubTypeSERVICECHARGE captures enum value "SERVICE_CHARGE"
	TransactionSubTypeSERVICECHARGE string = "SERVICE_CHARGE"

	// TransactionSubTypeSERVICECHARGEFEEREFUND captures enum value "SERVICE_CHARGE_FEE_REFUND"
	TransactionSubTypeSERVICECHARGEFEEREFUND string = "SERVICE_CHARGE_FEE_REFUND"

	// TransactionSubTypeRETURNEDCHECKCHARGE captures enum value "RETURNED_CHECK_CHARGE"
	TransactionSubTypeRETURNEDCHECKCHARGE string = "RETURNED_CHECK_CHARGE"

	// TransactionSubTypeRETURNEDCHECKREIMBURSEMENT captures enum value "RETURNED_CHECK_REIMBURSEMENT"
	TransactionSubTypeRETURNEDCHECKREIMBURSEMENT string = "RETURNED_CHECK_REIMBURSEMENT"

	// TransactionSubTypeCASHADVANCE captures enum value "CASH_ADVANCE"
	TransactionSubTypeCASHADVANCE string = "CASH_ADVANCE"

	// TransactionSubTypeBILLPAYCHARGE captures enum value "BILL_PAY_CHARGE"
	TransactionSubTypeBILLPAYCHARGE string = "BILL_PAY_CHARGE"

	// TransactionSubTypeCHECKIMAGESERVICECHARGE captures enum value "CHECK_IMAGE_SERVICE_CHARGE"
	TransactionSubTypeCHECKIMAGESERVICECHARGE string = "CHECK_IMAGE_SERVICE_CHARGE"

	// TransactionSubTypeOVERDRAFTPROTECTIONCHARGE captures enum value "OVERDRAFT_PROTECTION_CHARGE"
	TransactionSubTypeOVERDRAFTPROTECTIONCHARGE string = "OVERDRAFT_PROTECTION_CHARGE"

	// TransactionSubTypeSTOPPAYMENTCHARGE captures enum value "STOP_PAYMENT_CHARGE"
	TransactionSubTypeSTOPPAYMENTCHARGE string = "STOP_PAYMENT_CHARGE"

	// TransactionSubTypeCHECKSORDERINGCHARGE captures enum value "CHECKS_ORDERING_CHARGE"
	TransactionSubTypeCHECKSORDERINGCHARGE string = "CHECKS_ORDERING_CHARGE"

	// TransactionSubTypeMONTHLYMAINTENANCECHARGE captures enum value "MONTHLY_MAINTENANCE_CHARGE"
	TransactionSubTypeMONTHLYMAINTENANCECHARGE string = "MONTHLY_MAINTENANCE_CHARGE"

	// TransactionSubTypeDEBITCARDFEE captures enum value "DEBIT_CARD_FEE"
	TransactionSubTypeDEBITCARDFEE string = "DEBIT_CARD_FEE"

	// TransactionSubTypeCONVENIENCEFEE captures enum value "CONVENIENCE_FEE"
	TransactionSubTypeCONVENIENCEFEE string = "CONVENIENCE_FEE"

	// TransactionSubTypePERSONALLOANCREDIT captures enum value "PERSONAL_LOAN_CREDIT"
	TransactionSubTypePERSONALLOANCREDIT string = "PERSONAL_LOAN_CREDIT"

	// TransactionSubTypeCREDITCARDCREDIT captures enum value "CREDIT_CARD_CREDIT"
	TransactionSubTypeCREDITCARDCREDIT string = "CREDIT_CARD_CREDIT"

	// TransactionSubTypeAUTOLOAN captures enum value "AUTO_LOAN"
	TransactionSubTypeAUTOLOAN string = "AUTO_LOAN"

	// TransactionSubTypeHOMELOANMORTGAGE captures enum value "HOME_LOAN_MORTGAGE"
	TransactionSubTypeHOMELOANMORTGAGE string = "HOME_LOAN_MORTGAGE"

	// TransactionSubTypeSHORTTERMCREDIT captures enum value "SHORT_TERM_CREDIT"
	TransactionSubTypeSHORTTERMCREDIT string = "SHORT_TERM_CREDIT"

	// TransactionSubTypeSIGNATUREDEBIT captures enum value "SIGNATURE_DEBIT"
	TransactionSubTypeSIGNATUREDEBIT string = "SIGNATURE_DEBIT"

	// TransactionSubTypeCONTACTLESSDEBIT captures enum value "CONTACT_LESS_DEBIT"
	TransactionSubTypeCONTACTLESSDEBIT string = "CONTACT_LESS_DEBIT"

	// TransactionSubTypeDEFERREDDEPOSIT captures enum value "DEFERRED_DEPOSIT"
	TransactionSubTypeDEFERREDDEPOSIT string = "DEFERRED_DEPOSIT"

	// TransactionSubTypeDEFERREDBILLPAY captures enum value "DEFERRED_BILL_PAY"
	TransactionSubTypeDEFERREDBILLPAY string = "DEFERRED_BILL_PAY"

	// TransactionSubTypeINSTALLMENTPAYMENT captures enum value "INSTALLMENT_PAYMENT"
	TransactionSubTypeINSTALLMENTPAYMENT string = "INSTALLMENT_PAYMENT"

	// TransactionSubTypeRECURRINGSUBSCRIPTIONPAYMENT captures enum value "RECURRING_SUBSCRIPTION_PAYMENT"
	TransactionSubTypeRECURRINGSUBSCRIPTIONPAYMENT string = "RECURRING_SUBSCRIPTION_PAYMENT"

	// TransactionSubTypeHOLDCHECKPAYMENT captures enum value "HOLD_CHECK_PAYMENT"
	TransactionSubTypeHOLDCHECKPAYMENT string = "HOLD_CHECK_PAYMENT"

	// TransactionSubTypeCAPITALGAINSDISTIBUTION captures enum value "CAPITAL_GAINS_DISTIBUTION"
	TransactionSubTypeCAPITALGAINSDISTIBUTION string = "CAPITAL_GAINS_DISTIBUTION"

	// TransactionSubTypeCGLONGTERMDEPOSIT captures enum value "CG_LONG_TERM_DEPOSIT"
	TransactionSubTypeCGLONGTERMDEPOSIT string = "CG_LONG_TERM_DEPOSIT"

	// TransactionSubTypeOPENSALEDEPOSIT captures enum value "OPEN_SALE_DEPOSIT"
	TransactionSubTypeOPENSALEDEPOSIT string = "OPEN_SALE_DEPOSIT"

	// TransactionSubTypeINTERESTCHECK captures enum value "INTEREST__CHECK"
	TransactionSubTypeINTERESTCHECK string = "INTEREST__CHECK"

	// TransactionSubTypePURCHASEVOID captures enum value "PURCHASE_VOID"
	TransactionSubTypePURCHASEVOID string = "PURCHASE_VOID"

	// TransactionSubTypePURCHASEWITHCREDITCARD captures enum value "PURCHASE_WITH_CREDIT_CARD"
	TransactionSubTypePURCHASEWITHCREDITCARD string = "PURCHASE_WITH_CREDIT_CARD"

	// TransactionSubTypePURCHASEWITHDEBITCARD captures enum value "PURCHASE_WITH_DEBIT_CARD"
	TransactionSubTypePURCHASEWITHDEBITCARD string = "PURCHASE_WITH_DEBIT_CARD"

	// TransactionSubTypeCHARGEAREPEATCUSTOMER captures enum value "CHARGE_A_REPEAT_CUSTOMER"
	TransactionSubTypeCHARGEAREPEATCUSTOMER string = "CHARGE_A_REPEAT_CUSTOMER"

	// TransactionSubTypeDOWNPAYMENTORANNUITYPAYMENTORDIRECTPAYMENT captures enum value "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT"
	TransactionSubTypeDOWNPAYMENTORANNUITYPAYMENTORDIRECTPAYMENT string = "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT"

	// TransactionSubTypeFEEPAYMENT captures enum value "FEE_PAYMENT"
	TransactionSubTypeFEEPAYMENT string = "FEE_PAYMENT"

	// TransactionSubTypeFINANCECHARGEREFUND captures enum value "FINANCE_CHARGE_REFUND"
	TransactionSubTypeFINANCECHARGEREFUND string = "FINANCE_CHARGE_REFUND"

	// TransactionSubTypeTRANSACTIONVOID captures enum value "TRANSACTION_VOID"
	TransactionSubTypeTRANSACTIONVOID string = "TRANSACTION_VOID"

	// TransactionSubTypeFEEVOID captures enum value "FEE_VOID"
	TransactionSubTypeFEEVOID string = "FEE_VOID"

	// TransactionSubTypeDEBITCARDWITHDRAWALATSTORE captures enum value "DEBIT_CARD_WITHDRAWAL_AT_STORE"
	TransactionSubTypeDEBITCARDWITHDRAWALATSTORE string = "DEBIT_CARD_WITHDRAWAL_AT_STORE"

	// TransactionSubTypeELECTRONICPAYMENT captures enum value "ELECTRONIC_PAYMENT"
	TransactionSubTypeELECTRONICPAYMENT string = "ELECTRONIC_PAYMENT"

	// TransactionSubTypeACHDEBIT captures enum value "ACH_DEBIT"
	TransactionSubTypeACHDEBIT string = "ACH_DEBIT"

	// TransactionSubTypeATMTELLERDEPOSIT captures enum value "ATM_TELLER_DEPOSIT"
	TransactionSubTypeATMTELLERDEPOSIT string = "ATM_TELLER_DEPOSIT"

	// TransactionSubTypePOSDEBIT captures enum value "POS_DEBIT"
	TransactionSubTypePOSDEBIT string = "POS_DEBIT"

	// TransactionSubTypeBANKADJUSTMENT captures enum value "BANK_ADJUSTMENT"
	TransactionSubTypeBANKADJUSTMENT string = "BANK_ADJUSTMENT"

	// TransactionSubTypeCHARGESFEES captures enum value "CHARGES_FEES"
	TransactionSubTypeCHARGESFEES string = "CHARGES_FEES"

	// TransactionSubTypeINTEREST captures enum value "INTEREST"
	TransactionSubTypeINTEREST string = "INTEREST"

	// TransactionSubTypeDEPOSITSCREDITS captures enum value "DEPOSITS_CREDITS"
	TransactionSubTypeDEPOSITSCREDITS string = "DEPOSITS_CREDITS"

	// TransactionSubTypePAYMENT captures enum value "PAYMENT"
	TransactionSubTypePAYMENT string = "PAYMENT"

	// TransactionSubTypePURCHASE captures enum value "PURCHASE"
	TransactionSubTypePURCHASE string = "PURCHASE"

	// TransactionSubTypeREFUND captures enum value "REFUND"
	TransactionSubTypeREFUND string = "REFUND"

	// TransactionSubTypeTRANSFER captures enum value "TRANSFER"
	TransactionSubTypeTRANSFER string = "TRANSFER"

	// TransactionSubTypeWITHDRAWAL captures enum value "WITHDRAWAL"
	TransactionSubTypeWITHDRAWAL string = "WITHDRAWAL"

	// TransactionSubTypeOTHERDEPOSITS captures enum value "OTHER_DEPOSITS"
	TransactionSubTypeOTHERDEPOSITS string = "OTHER_DEPOSITS"

	// TransactionSubTypeOTHERWITHDRAWALS captures enum value "OTHER_WITHDRAWALS"
	TransactionSubTypeOTHERWITHDRAWALS string = "OTHER_WITHDRAWALS"

	// TransactionSubTypeADJUSTMENT captures enum value "ADJUSTMENT"
	TransactionSubTypeADJUSTMENT string = "ADJUSTMENT"

	// TransactionSubTypeFINANCECHARGE captures enum value "FINANCE_CHARGE"
	TransactionSubTypeFINANCECHARGE string = "FINANCE_CHARGE"

	// TransactionSubTypeOTHERCHARGESFEES captures enum value "OTHER_CHARGES_FEES"
	TransactionSubTypeOTHERCHARGESFEES string = "OTHER_CHARGES_FEES"

	// TransactionSubTypeANNUALFEE captures enum value "ANNUAL_FEE"
	TransactionSubTypeANNUALFEE string = "ANNUAL_FEE"

	// TransactionSubTypeDEPOSIT captures enum value "DEPOSIT"
	TransactionSubTypeDEPOSIT string = "DEPOSIT"

	// TransactionSubTypeDIRECTDEPOSITSALARY captures enum value "DIRECT_DEPOSIT_SALARY"
	TransactionSubTypeDIRECTDEPOSITSALARY string = "DIRECT_DEPOSIT_SALARY"

	// TransactionSubTypeINVESTMENTINCOMECASH captures enum value "INVESTMENT_INCOME_CASH"
	TransactionSubTypeINVESTMENTINCOMECASH string = "INVESTMENT_INCOME_CASH"

	// TransactionSubTypeSSA captures enum value "SSA"
	TransactionSubTypeSSA string = "SSA"

	// TransactionSubTypeREWARDS captures enum value "REWARDS"
	TransactionSubTypeREWARDS string = "REWARDS"

	// TransactionSubTypeCHECKDEPOSIT captures enum value "CHECK_DEPOSIT"
	TransactionSubTypeCHECKDEPOSIT string = "CHECK_DEPOSIT"

	// TransactionSubTypeMOBILEREMOTEDEPOSIT captures enum value "MOBILE_REMOTE_DEPOSIT"
	TransactionSubTypeMOBILEREMOTEDEPOSIT string = "MOBILE_REMOTE_DEPOSIT"

	// TransactionSubTypeTELLERDEPOSIT captures enum value "TELLER_DEPOSIT"
	TransactionSubTypeTELLERDEPOSIT string = "TELLER_DEPOSIT"

	// TransactionSubTypeTAXREFUND captures enum value "TAX_REFUND"
	TransactionSubTypeTAXREFUND string = "TAX_REFUND"

	// TransactionSubTypeCREDITCARDPAYMENT captures enum value "CREDIT_CARD_PAYMENT"
	TransactionSubTypeCREDITCARDPAYMENT string = "CREDIT_CARD_PAYMENT"

	// TransactionSubTypeINSURANCEPAYMENT captures enum value "INSURANCE_PAYMENT"
	TransactionSubTypeINSURANCEPAYMENT string = "INSURANCE_PAYMENT"

	// TransactionSubTypeUTILITIESPAYMENT captures enum value "UTILITIES_PAYMENT"
	TransactionSubTypeUTILITIESPAYMENT string = "UTILITIES_PAYMENT"

	// TransactionSubTypeCHILDSUPPORT captures enum value "CHILD_SUPPORT"
	TransactionSubTypeCHILDSUPPORT string = "CHILD_SUPPORT"

	// TransactionSubTypeLOAN captures enum value "LOAN"
	TransactionSubTypeLOAN string = "LOAN"

	// TransactionSubTypePERSONALLOAN captures enum value "PERSONAL_LOAN"
	TransactionSubTypePERSONALLOAN string = "PERSONAL_LOAN"

	// TransactionSubTypeSTUDENTLOAN captures enum value "STUDENT_LOAN"
	TransactionSubTypeSTUDENTLOAN string = "STUDENT_LOAN"

	// TransactionSubTypeSALESTAX captures enum value "SALES_TAX"
	TransactionSubTypeSALESTAX string = "SALES_TAX"

	// TransactionSubTypeREIMBURSEMENT captures enum value "REIMBURSEMENT"
	TransactionSubTypeREIMBURSEMENT string = "REIMBURSEMENT"

	// TransactionSubTypeBALANCETRANSFER captures enum value "BALANCE_TRANSFER"
	TransactionSubTypeBALANCETRANSFER string = "BALANCE_TRANSFER"

	// TransactionSubTypeWIRETRANSFER captures enum value "WIRE_TRANSFER"
	TransactionSubTypeWIRETRANSFER string = "WIRE_TRANSFER"

	// TransactionSubTypeOVERDRAFTPROTECTION captures enum value "OVERDRAFT_PROTECTION"
	TransactionSubTypeOVERDRAFTPROTECTION string = "OVERDRAFT_PROTECTION"

	// TransactionSubTypeDEBIT captures enum value "DEBIT"
	TransactionSubTypeDEBIT string = "DEBIT"

	// TransactionSubTypeCREDIT captures enum value "CREDIT"
	TransactionSubTypeCREDIT string = "CREDIT"

	// TransactionSubTypeNSFFEES captures enum value "NSF_FEES"
	TransactionSubTypeNSFFEES string = "NSF_FEES"
)

// prop value enum
func (m *Transaction) validateSubTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionTypeSubTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateSubType(formats strfmt.Registry) error {

	if swag.IsZero(m.SubType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubTypeEnum("subType", "body", m.SubType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
