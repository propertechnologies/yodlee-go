// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FieldOperation FieldOperation
// swagger:model FieldOperation
type FieldOperation struct {

	// Field for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>amount</li><li>description</li></ul><b>Applicable Values</b><br>
	// * amount: The rule created will be based on the amount field.<br>
	// * description: The rule created will be based on the description field.<br>
	// Enum: [amount description]
	Field string `json:"field,omitempty"`

	// Operation for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable values (depends on the value of field)</b>:<ul><li>field is <b>description</b> -> operation can be<ol><li>stringEquals</li><li>stringContains</li></ol></li><li>field is <b>amount</b> -> operation can be<ol><li>numberEquals</li><li>numberLessThan</li><li>numberLessThanEquals</li><li>numberGreaterThan</li><li>numberGreaterThanEquals</li></ol></li></ul><b>Applicable Values</b><br>
	// * numberEquals: The rule gets applied only when the amount field is equal to the specified value.<br>
	// * numberLessThan: The rule gets applied only when the amount field is lesser than the specified value.<br>
	// * numberLessThanEquals: The rule gets applied only when the amount field is less than or equal to the specified value.<br>
	// * numberGreaterThan: The rule gets applied only when the amount field is greater than the specified value.<br>
	// * numberGreaterThanEquals: The rule gets applied only when the amount field is greater than or equal to the specified value.<br>
	// * stringEquals: The rule gets applied only when the description field equals the specified value.<br>
	// * stringContains: The rule gets applied only when the description field contains the specified value.<br>
	// Enum: [numberEquals numberLessThan numberLessThanEquals numberGreaterThan numberGreaterThanEquals stringEquals stringContains]
	Operation string `json:"operation,omitempty"`

	// The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>field is <b>description</b> -> value should be <b>min of 3 and max of 50 characters</b></li><li>field is <b>amount</b> -> value should be <b> min value of 0 and a max value of 99999999999.99</b></li></ul>
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this field operation
func (m *FieldOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fieldOperationTypeFieldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["amount","description"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fieldOperationTypeFieldPropEnum = append(fieldOperationTypeFieldPropEnum, v)
	}
}

const (

	// FieldOperationFieldAmount captures enum value "amount"
	FieldOperationFieldAmount string = "amount"

	// FieldOperationFieldDescription captures enum value "description"
	FieldOperationFieldDescription string = "description"
)

// prop value enum
func (m *FieldOperation) validateFieldEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fieldOperationTypeFieldPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FieldOperation) validateField(formats strfmt.Registry) error {

	if swag.IsZero(m.Field) { // not required
		return nil
	}

	// value enum
	if err := m.validateFieldEnum("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

var fieldOperationTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["numberEquals","numberLessThan","numberLessThanEquals","numberGreaterThan","numberGreaterThanEquals","stringEquals","stringContains"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fieldOperationTypeOperationPropEnum = append(fieldOperationTypeOperationPropEnum, v)
	}
}

const (

	// FieldOperationOperationNumberEquals captures enum value "numberEquals"
	FieldOperationOperationNumberEquals string = "numberEquals"

	// FieldOperationOperationNumberLessThan captures enum value "numberLessThan"
	FieldOperationOperationNumberLessThan string = "numberLessThan"

	// FieldOperationOperationNumberLessThanEquals captures enum value "numberLessThanEquals"
	FieldOperationOperationNumberLessThanEquals string = "numberLessThanEquals"

	// FieldOperationOperationNumberGreaterThan captures enum value "numberGreaterThan"
	FieldOperationOperationNumberGreaterThan string = "numberGreaterThan"

	// FieldOperationOperationNumberGreaterThanEquals captures enum value "numberGreaterThanEquals"
	FieldOperationOperationNumberGreaterThanEquals string = "numberGreaterThanEquals"

	// FieldOperationOperationStringEquals captures enum value "stringEquals"
	FieldOperationOperationStringEquals string = "stringEquals"

	// FieldOperationOperationStringContains captures enum value "stringContains"
	FieldOperationOperationStringContains string = "stringContains"
)

// prop value enum
func (m *FieldOperation) validateOperationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fieldOperationTypeOperationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FieldOperation) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldOperation) UnmarshalBinary(b []byte) error {
	var res FieldOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
