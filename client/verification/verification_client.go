// Code generated by go-swagger; DO NOT EDIT.

package verification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new verification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for verification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetVerificationStatus gets verification status

The get verification status service is used to retrieve the verification status of all accounts<br>for which the MS or CDV process has been initiated.<br>For the MS process, the account details object returns the aggregated information of the<br>verified accounts. For the CDV process, the account details object returns the user<br>provided account information.<br>
*/
func (a *Client) GetVerificationStatus(params *GetVerificationStatusParams) (*GetVerificationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVerificationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVerificationStatus",
		Method:             "GET",
		PathPattern:        "/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVerificationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVerificationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVerificationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InitiateMatchingOrChallengeDepositeVerification initiaites matching service and challenge deposit

The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership. The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings). <ul><li>MS verification - The MS verification can be initiated only for an already aggregated account or a providerAccount. The prerequisite for the MS verification process is to request the following ACCT_PROFILE dataset attributes:</li><ul><li>FULL_ACCT_NUMBER</li><li>BANK_TRANSFER_CODE (optional based on the configuration done for the customer)</li><li>HOLDER_NAME</li></ul>In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. Contact the Yodlee CustomerCare team to configure the full name or only the last name match.</li></ul><ul><li>Challenge deposit account verification - Once the CDV process is initiated, Yodlee will post the microtransaction (i.e., credit and debit) in the user's account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details. The CDV process is currently supported only in the United States.</li></ul>
*/
func (a *Client) InitiateMatchingOrChallengeDepositeVerification(params *InitiateMatchingOrChallengeDepositeVerificationParams) (*InitiateMatchingOrChallengeDepositeVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateMatchingOrChallengeDepositeVerificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initiateMatchingOrChallengeDepositeVerification",
		Method:             "POST",
		PathPattern:        "/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InitiateMatchingOrChallengeDepositeVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitiateMatchingOrChallengeDepositeVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initiateMatchingOrChallengeDepositeVerification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyChallengeDeposit verifies challenge deposit

The put verification service is used to complete the CDV process.<br> In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee.<br> For a successful verification of the account's ownership both microtransaction details should match.<br>The CDV process is currently supported only in the United States.<br>
*/
func (a *Client) VerifyChallengeDeposit(params *VerifyChallengeDepositParams) (*VerifyChallengeDepositOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyChallengeDepositParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyChallengeDeposit",
		Method:             "PUT",
		PathPattern:        "/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyChallengeDepositReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyChallengeDepositOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyChallengeDeposit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
