// Code generated by go-swagger; DO NOT EDIT.

package derived

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/propertechnologies/yodlee-go/models"
)

// GetNetworthReader is a Reader for the GetNetworth structure.
type GetNetworthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNetworthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNetworthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNetworthNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNetworthOK creates a GetNetworthOK with default headers values
func NewGetNetworthOK() *GetNetworthOK {
	return &GetNetworthOK{}
}

/*GetNetworthOK handles this case with default header values.

OK
*/
type GetNetworthOK struct {
	Payload *models.DerivedNetworthResponse
}

func (o *GetNetworthOK) Error() string {
	return fmt.Sprintf("[GET /derived/networth][%d] getNetworthOK  %+v", 200, o.Payload)
}

func (o *GetNetworthOK) GetPayload() *models.DerivedNetworthResponse {
	return o.Payload
}

func (o *GetNetworthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DerivedNetworthResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworthBadRequest creates a GetNetworthBadRequest with default headers values
func NewGetNetworthBadRequest() *GetNetworthBadRequest {
	return &GetNetworthBadRequest{}
}

/*GetNetworthBadRequest handles this case with default header values.

Y800 : Invalid value for accountIds<br>Y800 : Invalid value for fromDate<br>Y800 : Invalid value for toDate<br>Y809 : Invalid date range<br>Y800 : Invalid value for interval<br>Y802 : Future date not allowed<br>Y814 : Exchange rate not available for currency
*/
type GetNetworthBadRequest struct {
	Payload *models.YodleeError
}

func (o *GetNetworthBadRequest) Error() string {
	return fmt.Sprintf("[GET /derived/networth][%d] getNetworthBadRequest  %+v", 400, o.Payload)
}

func (o *GetNetworthBadRequest) GetPayload() *models.YodleeError {
	return o.Payload
}

func (o *GetNetworthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.YodleeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworthUnauthorized creates a GetNetworthUnauthorized with default headers values
func NewGetNetworthUnauthorized() *GetNetworthUnauthorized {
	return &GetNetworthUnauthorized{}
}

/*GetNetworthUnauthorized handles this case with default header values.

Unauthorized
*/
type GetNetworthUnauthorized struct {
}

func (o *GetNetworthUnauthorized) Error() string {
	return fmt.Sprintf("[GET /derived/networth][%d] getNetworthUnauthorized ", 401)
}

func (o *GetNetworthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworthNotFound creates a GetNetworthNotFound with default headers values
func NewGetNetworthNotFound() *GetNetworthNotFound {
	return &GetNetworthNotFound{}
}

/*GetNetworthNotFound handles this case with default header values.

Not Found
*/
type GetNetworthNotFound struct {
}

func (o *GetNetworthNotFound) Error() string {
	return fmt.Sprintf("[GET /derived/networth][%d] getNetworthNotFound ", 404)
}

func (o *GetNetworthNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
