// Code generated by go-swagger; DO NOT EDIT.

package derived

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetHoldingSummaryParams creates a new GetHoldingSummaryParams object
// with the default values initialized.
func NewGetHoldingSummaryParams() *GetHoldingSummaryParams {
	var ()
	return &GetHoldingSummaryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHoldingSummaryParamsWithTimeout creates a new GetHoldingSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHoldingSummaryParamsWithTimeout(timeout time.Duration) *GetHoldingSummaryParams {
	var ()
	return &GetHoldingSummaryParams{

		timeout: timeout,
	}
}

// NewGetHoldingSummaryParamsWithContext creates a new GetHoldingSummaryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHoldingSummaryParamsWithContext(ctx context.Context) *GetHoldingSummaryParams {
	var ()
	return &GetHoldingSummaryParams{

		Context: ctx,
	}
}

// NewGetHoldingSummaryParamsWithHTTPClient creates a new GetHoldingSummaryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHoldingSummaryParamsWithHTTPClient(client *http.Client) *GetHoldingSummaryParams {
	var ()
	return &GetHoldingSummaryParams{
		HTTPClient: client,
	}
}

/*GetHoldingSummaryParams contains all the parameters to send to the API endpoint
for the get holding summary operation typically these are written to a http.Request
*/
type GetHoldingSummaryParams struct {

	/*AccountIds
	  Comma separated accountIds

	*/
	AccountIds *string
	/*ClassificationType
	  e.g. Country, Sector, etc.

	*/
	ClassificationType *string
	/*Include
	  details

	*/
	Include *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get holding summary params
func (o *GetHoldingSummaryParams) WithTimeout(timeout time.Duration) *GetHoldingSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get holding summary params
func (o *GetHoldingSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get holding summary params
func (o *GetHoldingSummaryParams) WithContext(ctx context.Context) *GetHoldingSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get holding summary params
func (o *GetHoldingSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get holding summary params
func (o *GetHoldingSummaryParams) WithHTTPClient(client *http.Client) *GetHoldingSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get holding summary params
func (o *GetHoldingSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountIds adds the accountIds to the get holding summary params
func (o *GetHoldingSummaryParams) WithAccountIds(accountIds *string) *GetHoldingSummaryParams {
	o.SetAccountIds(accountIds)
	return o
}

// SetAccountIds adds the accountIds to the get holding summary params
func (o *GetHoldingSummaryParams) SetAccountIds(accountIds *string) {
	o.AccountIds = accountIds
}

// WithClassificationType adds the classificationType to the get holding summary params
func (o *GetHoldingSummaryParams) WithClassificationType(classificationType *string) *GetHoldingSummaryParams {
	o.SetClassificationType(classificationType)
	return o
}

// SetClassificationType adds the classificationType to the get holding summary params
func (o *GetHoldingSummaryParams) SetClassificationType(classificationType *string) {
	o.ClassificationType = classificationType
}

// WithInclude adds the include to the get holding summary params
func (o *GetHoldingSummaryParams) WithInclude(include *string) *GetHoldingSummaryParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get holding summary params
func (o *GetHoldingSummaryParams) SetInclude(include *string) {
	o.Include = include
}

// WriteToRequest writes these params to a swagger request
func (o *GetHoldingSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountIds != nil {

		// query param accountIds
		var qrAccountIds string
		if o.AccountIds != nil {
			qrAccountIds = *o.AccountIds
		}
		qAccountIds := qrAccountIds
		if qAccountIds != "" {
			if err := r.SetQueryParam("accountIds", qAccountIds); err != nil {
				return err
			}
		}

	}

	if o.ClassificationType != nil {

		// query param classificationType
		var qrClassificationType string
		if o.ClassificationType != nil {
			qrClassificationType = *o.ClassificationType
		}
		qClassificationType := qrClassificationType
		if qClassificationType != "" {
			if err := r.SetQueryParam("classificationType", qClassificationType); err != nil {
				return err
			}
		}

	}

	if o.Include != nil {

		// query param include
		var qrInclude string
		if o.Include != nil {
			qrInclude = *o.Include
		}
		qInclude := qrInclude
		if qInclude != "" {
			if err := r.SetQueryParam("include", qInclude); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
