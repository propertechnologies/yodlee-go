// Code generated by go-swagger; DO NOT EDIT.

package derived

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNetworthParams creates a new GetNetworthParams object
// with the default values initialized.
func NewGetNetworthParams() *GetNetworthParams {
	var ()
	return &GetNetworthParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworthParamsWithTimeout creates a new GetNetworthParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworthParamsWithTimeout(timeout time.Duration) *GetNetworthParams {
	var ()
	return &GetNetworthParams{

		timeout: timeout,
	}
}

// NewGetNetworthParamsWithContext creates a new GetNetworthParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworthParamsWithContext(ctx context.Context) *GetNetworthParams {
	var ()
	return &GetNetworthParams{

		Context: ctx,
	}
}

// NewGetNetworthParamsWithHTTPClient creates a new GetNetworthParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworthParamsWithHTTPClient(client *http.Client) *GetNetworthParams {
	var ()
	return &GetNetworthParams{
		HTTPClient: client,
	}
}

/*GetNetworthParams contains all the parameters to send to the API endpoint
for the get networth operation typically these are written to a http.Request
*/
type GetNetworthParams struct {

	/*AccountIds
	  comma separated accountIds

	*/
	AccountIds *string
	/*FromDate
	  from date for balance retrieval (YYYY-MM-DD)

	*/
	FromDate *string
	/*Include
	  details

	*/
	Include *string
	/*Interval
	  D-daily, W-weekly or M-monthly

	*/
	Interval *string
	/*Skip
	  skip (Min 0)

	*/
	Skip *int32
	/*ToDate
	  toDate for balance retrieval (YYYY-MM-DD)

	*/
	ToDate *string
	/*Top
	  top (Max 500)

	*/
	Top *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get networth params
func (o *GetNetworthParams) WithTimeout(timeout time.Duration) *GetNetworthParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get networth params
func (o *GetNetworthParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get networth params
func (o *GetNetworthParams) WithContext(ctx context.Context) *GetNetworthParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get networth params
func (o *GetNetworthParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get networth params
func (o *GetNetworthParams) WithHTTPClient(client *http.Client) *GetNetworthParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get networth params
func (o *GetNetworthParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountIds adds the accountIds to the get networth params
func (o *GetNetworthParams) WithAccountIds(accountIds *string) *GetNetworthParams {
	o.SetAccountIds(accountIds)
	return o
}

// SetAccountIds adds the accountIds to the get networth params
func (o *GetNetworthParams) SetAccountIds(accountIds *string) {
	o.AccountIds = accountIds
}

// WithFromDate adds the fromDate to the get networth params
func (o *GetNetworthParams) WithFromDate(fromDate *string) *GetNetworthParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get networth params
func (o *GetNetworthParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithInclude adds the include to the get networth params
func (o *GetNetworthParams) WithInclude(include *string) *GetNetworthParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get networth params
func (o *GetNetworthParams) SetInclude(include *string) {
	o.Include = include
}

// WithInterval adds the interval to the get networth params
func (o *GetNetworthParams) WithInterval(interval *string) *GetNetworthParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get networth params
func (o *GetNetworthParams) SetInterval(interval *string) {
	o.Interval = interval
}

// WithSkip adds the skip to the get networth params
func (o *GetNetworthParams) WithSkip(skip *int32) *GetNetworthParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get networth params
func (o *GetNetworthParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithToDate adds the toDate to the get networth params
func (o *GetNetworthParams) WithToDate(toDate *string) *GetNetworthParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get networth params
func (o *GetNetworthParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WithTop adds the top to the get networth params
func (o *GetNetworthParams) WithTop(top *int32) *GetNetworthParams {
	o.SetTop(top)
	return o
}

// SetTop adds the top to the get networth params
func (o *GetNetworthParams) SetTop(top *int32) {
	o.Top = top
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworthParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountIds != nil {

		// query param accountIds
		var qrAccountIds string
		if o.AccountIds != nil {
			qrAccountIds = *o.AccountIds
		}
		qAccountIds := qrAccountIds
		if qAccountIds != "" {
			if err := r.SetQueryParam("accountIds", qAccountIds); err != nil {
				return err
			}
		}

	}

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate string
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {
			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}

	}

	if o.Include != nil {

		// query param include
		var qrInclude string
		if o.Include != nil {
			qrInclude = *o.Include
		}
		qInclude := qrInclude
		if qInclude != "" {
			if err := r.SetQueryParam("include", qInclude); err != nil {
				return err
			}
		}

	}

	if o.Interval != nil {

		// query param interval
		var qrInterval string
		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := qrInterval
		if qInterval != "" {
			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}

	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate string
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {
			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}

	}

	if o.Top != nil {

		// query param top
		var qrTop int32
		if o.Top != nil {
			qrTop = *o.Top
		}
		qTop := swag.FormatInt32(qrTop)
		if qTop != "" {
			if err := r.SetQueryParam("top", qTop); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
