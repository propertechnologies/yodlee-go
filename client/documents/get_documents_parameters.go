// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDocumentsParams creates a new GetDocumentsParams object
// with the default values initialized.
func NewGetDocumentsParams() *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDocumentsParamsWithTimeout creates a new GetDocumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDocumentsParamsWithTimeout(timeout time.Duration) *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{

		timeout: timeout,
	}
}

// NewGetDocumentsParamsWithContext creates a new GetDocumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDocumentsParamsWithContext(ctx context.Context) *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{

		Context: ctx,
	}
}

// NewGetDocumentsParamsWithHTTPClient creates a new GetDocumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDocumentsParamsWithHTTPClient(client *http.Client) *GetDocumentsParams {
	var ()
	return &GetDocumentsParams{
		HTTPClient: client,
	}
}

/*GetDocumentsParams contains all the parameters to send to the API endpoint
for the get documents operation typically these are written to a http.Request
*/
type GetDocumentsParams struct {

	/*Keyword
	  The string used to search a document by its name.

	*/
	Keyword *string
	/*AccountID
	  The unique identifier of an account. Retrieve documents for a given accountId.

	*/
	AccountID *string
	/*DocType
	  Accepts only one of the following valid document types: STMT, TAX, and EBILL.

	*/
	DocType *string
	/*FromDate
	  The date from which documents have to be retrieved.

	*/
	FromDate *string
	/*ToDate
	  The date to which documents have to be retrieved.

	*/
	ToDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get documents params
func (o *GetDocumentsParams) WithTimeout(timeout time.Duration) *GetDocumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get documents params
func (o *GetDocumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get documents params
func (o *GetDocumentsParams) WithContext(ctx context.Context) *GetDocumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get documents params
func (o *GetDocumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get documents params
func (o *GetDocumentsParams) WithHTTPClient(client *http.Client) *GetDocumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get documents params
func (o *GetDocumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeyword adds the keyword to the get documents params
func (o *GetDocumentsParams) WithKeyword(keyword *string) *GetDocumentsParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the get documents params
func (o *GetDocumentsParams) SetKeyword(keyword *string) {
	o.Keyword = keyword
}

// WithAccountID adds the accountID to the get documents params
func (o *GetDocumentsParams) WithAccountID(accountID *string) *GetDocumentsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get documents params
func (o *GetDocumentsParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithDocType adds the docType to the get documents params
func (o *GetDocumentsParams) WithDocType(docType *string) *GetDocumentsParams {
	o.SetDocType(docType)
	return o
}

// SetDocType adds the docType to the get documents params
func (o *GetDocumentsParams) SetDocType(docType *string) {
	o.DocType = docType
}

// WithFromDate adds the fromDate to the get documents params
func (o *GetDocumentsParams) WithFromDate(fromDate *string) *GetDocumentsParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get documents params
func (o *GetDocumentsParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithToDate adds the toDate to the get documents params
func (o *GetDocumentsParams) WithToDate(toDate *string) *GetDocumentsParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get documents params
func (o *GetDocumentsParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetDocumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Keyword != nil {

		// query param Keyword
		var qrKeyword string
		if o.Keyword != nil {
			qrKeyword = *o.Keyword
		}
		qKeyword := qrKeyword
		if qKeyword != "" {
			if err := r.SetQueryParam("Keyword", qKeyword); err != nil {
				return err
			}
		}

	}

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.DocType != nil {

		// query param docType
		var qrDocType string
		if o.DocType != nil {
			qrDocType = *o.DocType
		}
		qDocType := qrDocType
		if qDocType != "" {
			if err := r.SetQueryParam("docType", qDocType); err != nil {
				return err
			}
		}

	}

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate string
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {
			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}

	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate string
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {
			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
