// Code generated by go-swagger; DO NOT EDIT.

package documents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "yodlee-golang-client/models"
)

// DownloadDocumentReader is a Reader for the DownloadDocument structure.
type DownloadDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDownloadDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDownloadDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDownloadDocumentOK creates a DownloadDocumentOK with default headers values
func NewDownloadDocumentOK() *DownloadDocumentOK {
	return &DownloadDocumentOK{}
}

/*DownloadDocumentOK handles this case with default header values.

OK
*/
type DownloadDocumentOK struct {
	Payload *models.DocumentDownloadResponse
}

func (o *DownloadDocumentOK) Error() string {
	return fmt.Sprintf("[GET /documents/{documentId}][%d] downloadDocumentOK  %+v", 200, o.Payload)
}

func (o *DownloadDocumentOK) GetPayload() *models.DocumentDownloadResponse {
	return o.Payload
}

func (o *DownloadDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DocumentDownloadResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDocumentBadRequest creates a DownloadDocumentBadRequest with default headers values
func NewDownloadDocumentBadRequest() *DownloadDocumentBadRequest {
	return &DownloadDocumentBadRequest{}
}

/*DownloadDocumentBadRequest handles this case with default header values.

Y800 : Invalid value for documentID
*/
type DownloadDocumentBadRequest struct {
	Payload *models.YodleeError
}

func (o *DownloadDocumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /documents/{documentId}][%d] downloadDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *DownloadDocumentBadRequest) GetPayload() *models.YodleeError {
	return o.Payload
}

func (o *DownloadDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.YodleeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadDocumentUnauthorized creates a DownloadDocumentUnauthorized with default headers values
func NewDownloadDocumentUnauthorized() *DownloadDocumentUnauthorized {
	return &DownloadDocumentUnauthorized{}
}

/*DownloadDocumentUnauthorized handles this case with default header values.

Unauthorized
*/
type DownloadDocumentUnauthorized struct {
}

func (o *DownloadDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /documents/{documentId}][%d] downloadDocumentUnauthorized ", 401)
}

func (o *DownloadDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadDocumentNotFound creates a DownloadDocumentNotFound with default headers values
func NewDownloadDocumentNotFound() *DownloadDocumentNotFound {
	return &DownloadDocumentNotFound{}
}

/*DownloadDocumentNotFound handles this case with default header values.

Not Found
*/
type DownloadDocumentNotFound struct {
}

func (o *DownloadDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /documents/{documentId}][%d] downloadDocumentNotFound ", 404)
}

func (o *DownloadDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
