// Code generated by go-swagger; DO NOT EDIT.

package cobrand

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "yodlee-golang-client/models"
)

// UpdateSubscribedEventReader is a Reader for the UpdateSubscribedEvent structure.
type UpdateSubscribedEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSubscribedEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateSubscribedEventNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSubscribedEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSubscribedEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSubscribedEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSubscribedEventNoContent creates a UpdateSubscribedEventNoContent with default headers values
func NewUpdateSubscribedEventNoContent() *UpdateSubscribedEventNoContent {
	return &UpdateSubscribedEventNoContent{}
}

/*UpdateSubscribedEventNoContent handles this case with default header values.

OK
*/
type UpdateSubscribedEventNoContent struct {
}

func (o *UpdateSubscribedEventNoContent) Error() string {
	return fmt.Sprintf("[PUT /cobrand/config/notifications/events/{eventName}][%d] updateSubscribedEventNoContent ", 204)
}

func (o *UpdateSubscribedEventNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubscribedEventBadRequest creates a UpdateSubscribedEventBadRequest with default headers values
func NewUpdateSubscribedEventBadRequest() *UpdateSubscribedEventBadRequest {
	return &UpdateSubscribedEventBadRequest{}
}

/*UpdateSubscribedEventBadRequest handles this case with default header values.

Y803 : eventName required<br>Y803 : callbackUrl required<br>Y800 : Invalid value for callbackUrl
*/
type UpdateSubscribedEventBadRequest struct {
	Payload *models.YodleeError
}

func (o *UpdateSubscribedEventBadRequest) Error() string {
	return fmt.Sprintf("[PUT /cobrand/config/notifications/events/{eventName}][%d] updateSubscribedEventBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSubscribedEventBadRequest) GetPayload() *models.YodleeError {
	return o.Payload
}

func (o *UpdateSubscribedEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.YodleeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSubscribedEventUnauthorized creates a UpdateSubscribedEventUnauthorized with default headers values
func NewUpdateSubscribedEventUnauthorized() *UpdateSubscribedEventUnauthorized {
	return &UpdateSubscribedEventUnauthorized{}
}

/*UpdateSubscribedEventUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateSubscribedEventUnauthorized struct {
}

func (o *UpdateSubscribedEventUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cobrand/config/notifications/events/{eventName}][%d] updateSubscribedEventUnauthorized ", 401)
}

func (o *UpdateSubscribedEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSubscribedEventNotFound creates a UpdateSubscribedEventNotFound with default headers values
func NewUpdateSubscribedEventNotFound() *UpdateSubscribedEventNotFound {
	return &UpdateSubscribedEventNotFound{}
}

/*UpdateSubscribedEventNotFound handles this case with default header values.

Not Found
*/
type UpdateSubscribedEventNotFound struct {
}

func (o *UpdateSubscribedEventNotFound) Error() string {
	return fmt.Sprintf("[PUT /cobrand/config/notifications/events/{eventName}][%d] updateSubscribedEventNotFound ", 404)
}

func (o *UpdateSubscribedEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
