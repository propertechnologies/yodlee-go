// Code generated by go-swagger; DO NOT EDIT.

package cobrand

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSubscribedEventsParams creates a new GetSubscribedEventsParams object
// with the default values initialized.
func NewGetSubscribedEventsParams() *GetSubscribedEventsParams {
	var ()
	return &GetSubscribedEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscribedEventsParamsWithTimeout creates a new GetSubscribedEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSubscribedEventsParamsWithTimeout(timeout time.Duration) *GetSubscribedEventsParams {
	var ()
	return &GetSubscribedEventsParams{

		timeout: timeout,
	}
}

// NewGetSubscribedEventsParamsWithContext creates a new GetSubscribedEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSubscribedEventsParamsWithContext(ctx context.Context) *GetSubscribedEventsParams {
	var ()
	return &GetSubscribedEventsParams{

		Context: ctx,
	}
}

// NewGetSubscribedEventsParamsWithHTTPClient creates a new GetSubscribedEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSubscribedEventsParamsWithHTTPClient(client *http.Client) *GetSubscribedEventsParams {
	var ()
	return &GetSubscribedEventsParams{
		HTTPClient: client,
	}
}

/*GetSubscribedEventsParams contains all the parameters to send to the API endpoint
for the get subscribed events operation typically these are written to a http.Request
*/
type GetSubscribedEventsParams struct {

	/*EventName
	  eventName
	* REFRESH: Events that happen during add, edit and update aggregated accounts processes.<br>
	* DATA_UPDATES: Data updates that happen on provider accounts, accounts, transactions and holdings data due to user actions or auto updates. This event is triggered to help the customer perform data extracts from Yodlee system to their system.<br>
	* AUTO_REFRESH_UPDATES: Events that gets triggered once there is a change in the state of cache refresh.<br>

	*/
	EventName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get subscribed events params
func (o *GetSubscribedEventsParams) WithTimeout(timeout time.Duration) *GetSubscribedEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subscribed events params
func (o *GetSubscribedEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subscribed events params
func (o *GetSubscribedEventsParams) WithContext(ctx context.Context) *GetSubscribedEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subscribed events params
func (o *GetSubscribedEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subscribed events params
func (o *GetSubscribedEventsParams) WithHTTPClient(client *http.Client) *GetSubscribedEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subscribed events params
func (o *GetSubscribedEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventName adds the eventName to the get subscribed events params
func (o *GetSubscribedEventsParams) WithEventName(eventName *string) *GetSubscribedEventsParams {
	o.SetEventName(eventName)
	return o
}

// SetEventName adds the eventName to the get subscribed events params
func (o *GetSubscribedEventsParams) SetEventName(eventName *string) {
	o.EventName = eventName
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscribedEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EventName != nil {

		// query param eventName
		var qrEventName string
		if o.EventName != nil {
			qrEventName = *o.EventName
		}
		qEventName := qrEventName
		if qEventName != "" {
			if err := r.SetQueryParam("eventName", qEventName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
