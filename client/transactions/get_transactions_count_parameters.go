// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTransactionsCountParams creates a new GetTransactionsCountParams object
// with the default values initialized.
func NewGetTransactionsCountParams() *GetTransactionsCountParams {
	var ()
	return &GetTransactionsCountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransactionsCountParamsWithTimeout creates a new GetTransactionsCountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTransactionsCountParamsWithTimeout(timeout time.Duration) *GetTransactionsCountParams {
	var ()
	return &GetTransactionsCountParams{

		timeout: timeout,
	}
}

// NewGetTransactionsCountParamsWithContext creates a new GetTransactionsCountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTransactionsCountParamsWithContext(ctx context.Context) *GetTransactionsCountParams {
	var ()
	return &GetTransactionsCountParams{

		Context: ctx,
	}
}

// NewGetTransactionsCountParamsWithHTTPClient creates a new GetTransactionsCountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTransactionsCountParamsWithHTTPClient(client *http.Client) *GetTransactionsCountParams {
	var ()
	return &GetTransactionsCountParams{
		HTTPClient: client,
	}
}

/*GetTransactionsCountParams contains all the parameters to send to the API endpoint
for the get transactions count operation typically these are written to a http.Request
*/
type GetTransactionsCountParams struct {

	/*AccountID
	  Comma separated accountIds

	*/
	AccountID *string
	/*BaseType
	  DEBIT/CREDIT

	*/
	BaseType *string
	/*CategoryID
	  Comma separated categoryIds

	*/
	CategoryID *string
	/*CategoryType
	  Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION)

	*/
	CategoryType *string
	/*Container
	  bank/creditCard/investment/insurance/loan

	*/
	Container *string
	/*DetailCategoryID
	  Comma separated detailCategoryIds

	*/
	DetailCategoryID *string
	/*FromDate
	  Transaction from date(YYYY-MM-DD)

	*/
	FromDate *string
	/*HighLevelCategoryID
	  Comma separated highLevelCategoryIds

	*/
	HighLevelCategoryID *string
	/*Keyword
	  Transaction search text

	*/
	Keyword *string
	/*ToDate
	  Transaction end date (YYYY-MM-DD)

	*/
	ToDate *string
	/*Type
	  Transaction Type(SELL,SWEEP, etc.)

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get transactions count params
func (o *GetTransactionsCountParams) WithTimeout(timeout time.Duration) *GetTransactionsCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transactions count params
func (o *GetTransactionsCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transactions count params
func (o *GetTransactionsCountParams) WithContext(ctx context.Context) *GetTransactionsCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transactions count params
func (o *GetTransactionsCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transactions count params
func (o *GetTransactionsCountParams) WithHTTPClient(client *http.Client) *GetTransactionsCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transactions count params
func (o *GetTransactionsCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get transactions count params
func (o *GetTransactionsCountParams) WithAccountID(accountID *string) *GetTransactionsCountParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get transactions count params
func (o *GetTransactionsCountParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithBaseType adds the baseType to the get transactions count params
func (o *GetTransactionsCountParams) WithBaseType(baseType *string) *GetTransactionsCountParams {
	o.SetBaseType(baseType)
	return o
}

// SetBaseType adds the baseType to the get transactions count params
func (o *GetTransactionsCountParams) SetBaseType(baseType *string) {
	o.BaseType = baseType
}

// WithCategoryID adds the categoryID to the get transactions count params
func (o *GetTransactionsCountParams) WithCategoryID(categoryID *string) *GetTransactionsCountParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the get transactions count params
func (o *GetTransactionsCountParams) SetCategoryID(categoryID *string) {
	o.CategoryID = categoryID
}

// WithCategoryType adds the categoryType to the get transactions count params
func (o *GetTransactionsCountParams) WithCategoryType(categoryType *string) *GetTransactionsCountParams {
	o.SetCategoryType(categoryType)
	return o
}

// SetCategoryType adds the categoryType to the get transactions count params
func (o *GetTransactionsCountParams) SetCategoryType(categoryType *string) {
	o.CategoryType = categoryType
}

// WithContainer adds the container to the get transactions count params
func (o *GetTransactionsCountParams) WithContainer(container *string) *GetTransactionsCountParams {
	o.SetContainer(container)
	return o
}

// SetContainer adds the container to the get transactions count params
func (o *GetTransactionsCountParams) SetContainer(container *string) {
	o.Container = container
}

// WithDetailCategoryID adds the detailCategoryID to the get transactions count params
func (o *GetTransactionsCountParams) WithDetailCategoryID(detailCategoryID *string) *GetTransactionsCountParams {
	o.SetDetailCategoryID(detailCategoryID)
	return o
}

// SetDetailCategoryID adds the detailCategoryId to the get transactions count params
func (o *GetTransactionsCountParams) SetDetailCategoryID(detailCategoryID *string) {
	o.DetailCategoryID = detailCategoryID
}

// WithFromDate adds the fromDate to the get transactions count params
func (o *GetTransactionsCountParams) WithFromDate(fromDate *string) *GetTransactionsCountParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get transactions count params
func (o *GetTransactionsCountParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithHighLevelCategoryID adds the highLevelCategoryID to the get transactions count params
func (o *GetTransactionsCountParams) WithHighLevelCategoryID(highLevelCategoryID *string) *GetTransactionsCountParams {
	o.SetHighLevelCategoryID(highLevelCategoryID)
	return o
}

// SetHighLevelCategoryID adds the highLevelCategoryId to the get transactions count params
func (o *GetTransactionsCountParams) SetHighLevelCategoryID(highLevelCategoryID *string) {
	o.HighLevelCategoryID = highLevelCategoryID
}

// WithKeyword adds the keyword to the get transactions count params
func (o *GetTransactionsCountParams) WithKeyword(keyword *string) *GetTransactionsCountParams {
	o.SetKeyword(keyword)
	return o
}

// SetKeyword adds the keyword to the get transactions count params
func (o *GetTransactionsCountParams) SetKeyword(keyword *string) {
	o.Keyword = keyword
}

// WithToDate adds the toDate to the get transactions count params
func (o *GetTransactionsCountParams) WithToDate(toDate *string) *GetTransactionsCountParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get transactions count params
func (o *GetTransactionsCountParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WithType adds the typeVar to the get transactions count params
func (o *GetTransactionsCountParams) WithType(typeVar *string) *GetTransactionsCountParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get transactions count params
func (o *GetTransactionsCountParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransactionsCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.BaseType != nil {

		// query param baseType
		var qrBaseType string
		if o.BaseType != nil {
			qrBaseType = *o.BaseType
		}
		qBaseType := qrBaseType
		if qBaseType != "" {
			if err := r.SetQueryParam("baseType", qBaseType); err != nil {
				return err
			}
		}

	}

	if o.CategoryID != nil {

		// query param categoryId
		var qrCategoryID string
		if o.CategoryID != nil {
			qrCategoryID = *o.CategoryID
		}
		qCategoryID := qrCategoryID
		if qCategoryID != "" {
			if err := r.SetQueryParam("categoryId", qCategoryID); err != nil {
				return err
			}
		}

	}

	if o.CategoryType != nil {

		// query param categoryType
		var qrCategoryType string
		if o.CategoryType != nil {
			qrCategoryType = *o.CategoryType
		}
		qCategoryType := qrCategoryType
		if qCategoryType != "" {
			if err := r.SetQueryParam("categoryType", qCategoryType); err != nil {
				return err
			}
		}

	}

	if o.Container != nil {

		// query param container
		var qrContainer string
		if o.Container != nil {
			qrContainer = *o.Container
		}
		qContainer := qrContainer
		if qContainer != "" {
			if err := r.SetQueryParam("container", qContainer); err != nil {
				return err
			}
		}

	}

	if o.DetailCategoryID != nil {

		// query param detailCategoryId
		var qrDetailCategoryID string
		if o.DetailCategoryID != nil {
			qrDetailCategoryID = *o.DetailCategoryID
		}
		qDetailCategoryID := qrDetailCategoryID
		if qDetailCategoryID != "" {
			if err := r.SetQueryParam("detailCategoryId", qDetailCategoryID); err != nil {
				return err
			}
		}

	}

	if o.FromDate != nil {

		// query param fromDate
		var qrFromDate string
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {
			if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
				return err
			}
		}

	}

	if o.HighLevelCategoryID != nil {

		// query param highLevelCategoryId
		var qrHighLevelCategoryID string
		if o.HighLevelCategoryID != nil {
			qrHighLevelCategoryID = *o.HighLevelCategoryID
		}
		qHighLevelCategoryID := qrHighLevelCategoryID
		if qHighLevelCategoryID != "" {
			if err := r.SetQueryParam("highLevelCategoryId", qHighLevelCategoryID); err != nil {
				return err
			}
		}

	}

	if o.Keyword != nil {

		// query param keyword
		var qrKeyword string
		if o.Keyword != nil {
			qrKeyword = *o.Keyword
		}
		qKeyword := qrKeyword
		if qKeyword != "" {
			if err := r.SetQueryParam("keyword", qKeyword); err != nil {
				return err
			}
		}

	}

	if o.ToDate != nil {

		// query param toDate
		var qrToDate string
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {
			if err := r.SetQueryParam("toDate", qToDate); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
