// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/propertechnologies/yodlee-go/models"
)

// NewUpdateTransactionParams creates a new UpdateTransactionParams object
// with the default values initialized.
func NewUpdateTransactionParams() *UpdateTransactionParams {
	var ()
	return &UpdateTransactionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTransactionParamsWithTimeout creates a new UpdateTransactionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateTransactionParamsWithTimeout(timeout time.Duration) *UpdateTransactionParams {
	var ()
	return &UpdateTransactionParams{

		timeout: timeout,
	}
}

// NewUpdateTransactionParamsWithContext creates a new UpdateTransactionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateTransactionParamsWithContext(ctx context.Context) *UpdateTransactionParams {
	var ()
	return &UpdateTransactionParams{

		Context: ctx,
	}
}

// NewUpdateTransactionParamsWithHTTPClient creates a new UpdateTransactionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateTransactionParamsWithHTTPClient(client *http.Client) *UpdateTransactionParams {
	var ()
	return &UpdateTransactionParams{
		HTTPClient: client,
	}
}

/*UpdateTransactionParams contains all the parameters to send to the API endpoint
for the update transaction operation typically these are written to a http.Request
*/
type UpdateTransactionParams struct {

	/*TransactionID
	  transactionId

	*/
	TransactionID int64
	/*TransactionRequest
	  transactionRequest

	*/
	TransactionRequest *models.TransactionRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update transaction params
func (o *UpdateTransactionParams) WithTimeout(timeout time.Duration) *UpdateTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update transaction params
func (o *UpdateTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update transaction params
func (o *UpdateTransactionParams) WithContext(ctx context.Context) *UpdateTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update transaction params
func (o *UpdateTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update transaction params
func (o *UpdateTransactionParams) WithHTTPClient(client *http.Client) *UpdateTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update transaction params
func (o *UpdateTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTransactionID adds the transactionID to the update transaction params
func (o *UpdateTransactionParams) WithTransactionID(transactionID int64) *UpdateTransactionParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the update transaction params
func (o *UpdateTransactionParams) SetTransactionID(transactionID int64) {
	o.TransactionID = transactionID
}

// WithTransactionRequest adds the transactionRequest to the update transaction params
func (o *UpdateTransactionParams) WithTransactionRequest(transactionRequest *models.TransactionRequest) *UpdateTransactionParams {
	o.SetTransactionRequest(transactionRequest)
	return o
}

// SetTransactionRequest adds the transactionRequest to the update transaction params
func (o *UpdateTransactionParams) SetTransactionRequest(transactionRequest *models.TransactionRequest) {
	o.TransactionRequest = transactionRequest
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param transactionId
	if err := r.SetPathParam("transactionId", swag.FormatInt64(o.TransactionID)); err != nil {
		return err
	}

	if o.TransactionRequest != nil {
		if err := r.SetBodyParam(o.TransactionRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
