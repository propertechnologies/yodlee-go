// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateOrRunTransactionCategorizationRulesParams creates a new CreateOrRunTransactionCategorizationRulesParams object
// with the default values initialized.
func NewCreateOrRunTransactionCategorizationRulesParams() *CreateOrRunTransactionCategorizationRulesParams {
	var ()
	return &CreateOrRunTransactionCategorizationRulesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateOrRunTransactionCategorizationRulesParamsWithTimeout creates a new CreateOrRunTransactionCategorizationRulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateOrRunTransactionCategorizationRulesParamsWithTimeout(timeout time.Duration) *CreateOrRunTransactionCategorizationRulesParams {
	var ()
	return &CreateOrRunTransactionCategorizationRulesParams{

		timeout: timeout,
	}
}

// NewCreateOrRunTransactionCategorizationRulesParamsWithContext creates a new CreateOrRunTransactionCategorizationRulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateOrRunTransactionCategorizationRulesParamsWithContext(ctx context.Context) *CreateOrRunTransactionCategorizationRulesParams {
	var ()
	return &CreateOrRunTransactionCategorizationRulesParams{

		Context: ctx,
	}
}

// NewCreateOrRunTransactionCategorizationRulesParamsWithHTTPClient creates a new CreateOrRunTransactionCategorizationRulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateOrRunTransactionCategorizationRulesParamsWithHTTPClient(client *http.Client) *CreateOrRunTransactionCategorizationRulesParams {
	var ()
	return &CreateOrRunTransactionCategorizationRulesParams{
		HTTPClient: client,
	}
}

/*CreateOrRunTransactionCategorizationRulesParams contains all the parameters to send to the API endpoint
for the create or run transaction categorization rules operation typically these are written to a http.Request
*/
type CreateOrRunTransactionCategorizationRulesParams struct {

	/*Action
	  To run rules, pass action=run. Only value run is supported

	*/
	Action *string
	/*RuleParam
	  rules(JSON format) to categorize the transactions

	*/
	RuleParam *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) WithTimeout(timeout time.Duration) *CreateOrRunTransactionCategorizationRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) WithContext(ctx context.Context) *CreateOrRunTransactionCategorizationRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) WithHTTPClient(client *http.Client) *CreateOrRunTransactionCategorizationRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) WithAction(action *string) *CreateOrRunTransactionCategorizationRulesParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) SetAction(action *string) {
	o.Action = action
}

// WithRuleParam adds the ruleParam to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) WithRuleParam(ruleParam *string) *CreateOrRunTransactionCategorizationRulesParams {
	o.SetRuleParam(ruleParam)
	return o
}

// SetRuleParam adds the ruleParam to the create or run transaction categorization rules params
func (o *CreateOrRunTransactionCategorizationRulesParams) SetRuleParam(ruleParam *string) {
	o.RuleParam = ruleParam
}

// WriteToRequest writes these params to a swagger request
func (o *CreateOrRunTransactionCategorizationRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Action != nil {

		// query param action
		var qrAction string
		if o.Action != nil {
			qrAction = *o.Action
		}
		qAction := qrAction
		if qAction != "" {
			if err := r.SetQueryParam("action", qAction); err != nil {
				return err
			}
		}

	}

	if o.RuleParam != nil {

		// query param ruleParam
		var qrRuleParam string
		if o.RuleParam != nil {
			qrRuleParam = *o.RuleParam
		}
		qRuleParam := qrRuleParam
		if qRuleParam != "" {
			if err := r.SetQueryParam("ruleParam", qRuleParam); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
