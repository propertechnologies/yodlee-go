// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/propertechnologies/yodlee-go/models"
)

// GetTransactionsReader is a Reader for the GetTransactions structure.
type GetTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTransactionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionsOK creates a GetTransactionsOK with default headers values
func NewGetTransactionsOK() *GetTransactionsOK {
	return &GetTransactionsOK{}
}

/*GetTransactionsOK handles this case with default header values.

OK
*/
type GetTransactionsOK struct {
	Payload *models.TransactionResponse
}

func (o *GetTransactionsOK) Error() string {
	return fmt.Sprintf("[GET /transactions][%d] getTransactionsOK  %+v", 200, o.Payload)
}

func (o *GetTransactionsOK) GetPayload() *models.TransactionResponse {
	return o.Payload
}

func (o *GetTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransactionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsBadRequest creates a GetTransactionsBadRequest with default headers values
func NewGetTransactionsBadRequest() *GetTransactionsBadRequest {
	return &GetTransactionsBadRequest{}
}

/*GetTransactionsBadRequest handles this case with default header values.

Y800 : Invalid value for baseType<br>Y800 : Invalid value for fromDate<br>Y800 : Invalid value for category<br>Y800 : Invalid value for toDate<br>Y800 : Invalid value for container<br>Y809 : Invalid date range<br>Y804 : Permitted values of top between 1 - 500<br>Y805 : Multiple containers not supported<br>Y800 : Invalid value for transaction type<br>Y824 : The maximum number of accountIds permitted is 100<br>Y824 : The maximum number of categoryIds permitted is 100<br>Y824 : The maximum number of highLevelCategoryIds permitted is 100<br>Y848 : detailCategoryId cannot be provided as input, as the detailedCategory feature is not enabled<br>Y823 : detailCategoryId is not for applicable containers other than bank and card<br>Y824 : The maximum number of detailCategoryIds permitted is 100<br>Y800 : Invalid value for detailCategoryId
*/
type GetTransactionsBadRequest struct {
	Payload *models.YodleeError
}

func (o *GetTransactionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /transactions][%d] getTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionsBadRequest) GetPayload() *models.YodleeError {
	return o.Payload
}

func (o *GetTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.YodleeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionsUnauthorized creates a GetTransactionsUnauthorized with default headers values
func NewGetTransactionsUnauthorized() *GetTransactionsUnauthorized {
	return &GetTransactionsUnauthorized{}
}

/*GetTransactionsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetTransactionsUnauthorized struct {
}

func (o *GetTransactionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /transactions][%d] getTransactionsUnauthorized ", 401)
}

func (o *GetTransactionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTransactionsNotFound creates a GetTransactionsNotFound with default headers values
func NewGetTransactionsNotFound() *GetTransactionsNotFound {
	return &GetTransactionsNotFound{}
}

/*GetTransactionsNotFound handles this case with default header values.

Not Found
*/
type GetTransactionsNotFound struct {
}

func (o *GetTransactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /transactions][%d] getTransactionsNotFound ", 404)
}

func (o *GetTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
