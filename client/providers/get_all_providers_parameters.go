// Code generated by go-swagger; DO NOT EDIT.

package providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllProvidersParams creates a new GetAllProvidersParams object
// with the default values initialized.
func NewGetAllProvidersParams() *GetAllProvidersParams {
	var ()
	return &GetAllProvidersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllProvidersParamsWithTimeout creates a new GetAllProvidersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllProvidersParamsWithTimeout(timeout time.Duration) *GetAllProvidersParams {
	var ()
	return &GetAllProvidersParams{

		timeout: timeout,
	}
}

// NewGetAllProvidersParamsWithContext creates a new GetAllProvidersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllProvidersParamsWithContext(ctx context.Context) *GetAllProvidersParams {
	var ()
	return &GetAllProvidersParams{

		Context: ctx,
	}
}

// NewGetAllProvidersParamsWithHTTPClient creates a new GetAllProvidersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllProvidersParamsWithHTTPClient(client *http.Client) *GetAllProvidersParams {
	var ()
	return &GetAllProvidersParams{
		HTTPClient: client,
	}
}

/*GetAllProvidersParams contains all the parameters to send to the API endpoint
for the get all providers operation typically these are written to a http.Request
*/
type GetAllProvidersParams struct {

	/*Capability
	  CHALLENGE_DEPOSIT_VERIFICATION

	*/
	Capability *string
	/*DatasetDollarFilter
	  Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer.

	*/
	DatasetDollarFilter *string
	/*Name
	  Name in minimum 1 character or routing number.

	*/
	Name *string
	/*Priority
	  Search priority

	*/
	Priority *string
	/*Skip
	  skip (Min 0) - This is not applicable along with 'name' parameter.

	*/
	Skip *int32
	/*Top
	  top (Max 500) - This is not applicable along with 'name' parameter.

	*/
	Top *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all providers params
func (o *GetAllProvidersParams) WithTimeout(timeout time.Duration) *GetAllProvidersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all providers params
func (o *GetAllProvidersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all providers params
func (o *GetAllProvidersParams) WithContext(ctx context.Context) *GetAllProvidersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all providers params
func (o *GetAllProvidersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all providers params
func (o *GetAllProvidersParams) WithHTTPClient(client *http.Client) *GetAllProvidersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all providers params
func (o *GetAllProvidersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapability adds the capability to the get all providers params
func (o *GetAllProvidersParams) WithCapability(capability *string) *GetAllProvidersParams {
	o.SetCapability(capability)
	return o
}

// SetCapability adds the capability to the get all providers params
func (o *GetAllProvidersParams) SetCapability(capability *string) {
	o.Capability = capability
}

// WithDatasetDollarFilter adds the datasetDollarFilter to the get all providers params
func (o *GetAllProvidersParams) WithDatasetDollarFilter(datasetDollarFilter *string) *GetAllProvidersParams {
	o.SetDatasetDollarFilter(datasetDollarFilter)
	return o
}

// SetDatasetDollarFilter adds the datasetDollar Filter to the get all providers params
func (o *GetAllProvidersParams) SetDatasetDollarFilter(datasetDollarFilter *string) {
	o.DatasetDollarFilter = datasetDollarFilter
}

// WithName adds the name to the get all providers params
func (o *GetAllProvidersParams) WithName(name *string) *GetAllProvidersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get all providers params
func (o *GetAllProvidersParams) SetName(name *string) {
	o.Name = name
}

// WithPriority adds the priority to the get all providers params
func (o *GetAllProvidersParams) WithPriority(priority *string) *GetAllProvidersParams {
	o.SetPriority(priority)
	return o
}

// SetPriority adds the priority to the get all providers params
func (o *GetAllProvidersParams) SetPriority(priority *string) {
	o.Priority = priority
}

// WithSkip adds the skip to the get all providers params
func (o *GetAllProvidersParams) WithSkip(skip *int32) *GetAllProvidersParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get all providers params
func (o *GetAllProvidersParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTop adds the top to the get all providers params
func (o *GetAllProvidersParams) WithTop(top *int32) *GetAllProvidersParams {
	o.SetTop(top)
	return o
}

// SetTop adds the top to the get all providers params
func (o *GetAllProvidersParams) SetTop(top *int32) {
	o.Top = top
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllProvidersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Capability != nil {

		// query param capability
		var qrCapability string
		if o.Capability != nil {
			qrCapability = *o.Capability
		}
		qCapability := qrCapability
		if qCapability != "" {
			if err := r.SetQueryParam("capability", qCapability); err != nil {
				return err
			}
		}

	}

	if o.DatasetDollarFilter != nil {

		// query param dataset$filter
		var qrDatasetDollarFilter string
		if o.DatasetDollarFilter != nil {
			qrDatasetDollarFilter = *o.DatasetDollarFilter
		}
		qDatasetDollarFilter := qrDatasetDollarFilter
		if qDatasetDollarFilter != "" {
			if err := r.SetQueryParam("dataset$filter", qDatasetDollarFilter); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Priority != nil {

		// query param priority
		var qrPriority string
		if o.Priority != nil {
			qrPriority = *o.Priority
		}
		qPriority := qrPriority
		if qPriority != "" {
			if err := r.SetQueryParam("priority", qPriority); err != nil {
				return err
			}
		}

	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32
		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {
			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}

	}

	if o.Top != nil {

		// query param top
		var qrTop int32
		if o.Top != nil {
			qrTop = *o.Top
		}
		qTop := swag.FormatInt32(qrTop)
		if qTop != "" {
			if err := r.SetQueryParam("top", qTop); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
