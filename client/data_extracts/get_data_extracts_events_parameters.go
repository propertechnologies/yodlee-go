// Code generated by go-swagger; DO NOT EDIT.

package data_extracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDataExtractsEventsParams creates a new GetDataExtractsEventsParams object
// with the default values initialized.
func NewGetDataExtractsEventsParams() *GetDataExtractsEventsParams {
	var ()
	return &GetDataExtractsEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataExtractsEventsParamsWithTimeout creates a new GetDataExtractsEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDataExtractsEventsParamsWithTimeout(timeout time.Duration) *GetDataExtractsEventsParams {
	var ()
	return &GetDataExtractsEventsParams{

		timeout: timeout,
	}
}

// NewGetDataExtractsEventsParamsWithContext creates a new GetDataExtractsEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDataExtractsEventsParamsWithContext(ctx context.Context) *GetDataExtractsEventsParams {
	var ()
	return &GetDataExtractsEventsParams{

		Context: ctx,
	}
}

// NewGetDataExtractsEventsParamsWithHTTPClient creates a new GetDataExtractsEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDataExtractsEventsParamsWithHTTPClient(client *http.Client) *GetDataExtractsEventsParams {
	var ()
	return &GetDataExtractsEventsParams{
		HTTPClient: client,
	}
}

/*GetDataExtractsEventsParams contains all the parameters to send to the API endpoint
for the get data extracts events operation typically these are written to a http.Request
*/
type GetDataExtractsEventsParams struct {

	/*EventName
	  Event Name

	*/
	EventName string
	/*FromDate
	  From DateTime (YYYY-MM-DDThh:mm:ssZ)

	*/
	FromDate string
	/*ToDate
	  To DateTime (YYYY-MM-DDThh:mm:ssZ)

	*/
	ToDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get data extracts events params
func (o *GetDataExtractsEventsParams) WithTimeout(timeout time.Duration) *GetDataExtractsEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data extracts events params
func (o *GetDataExtractsEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data extracts events params
func (o *GetDataExtractsEventsParams) WithContext(ctx context.Context) *GetDataExtractsEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data extracts events params
func (o *GetDataExtractsEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data extracts events params
func (o *GetDataExtractsEventsParams) WithHTTPClient(client *http.Client) *GetDataExtractsEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data extracts events params
func (o *GetDataExtractsEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventName adds the eventName to the get data extracts events params
func (o *GetDataExtractsEventsParams) WithEventName(eventName string) *GetDataExtractsEventsParams {
	o.SetEventName(eventName)
	return o
}

// SetEventName adds the eventName to the get data extracts events params
func (o *GetDataExtractsEventsParams) SetEventName(eventName string) {
	o.EventName = eventName
}

// WithFromDate adds the fromDate to the get data extracts events params
func (o *GetDataExtractsEventsParams) WithFromDate(fromDate string) *GetDataExtractsEventsParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get data extracts events params
func (o *GetDataExtractsEventsParams) SetFromDate(fromDate string) {
	o.FromDate = fromDate
}

// WithToDate adds the toDate to the get data extracts events params
func (o *GetDataExtractsEventsParams) WithToDate(toDate string) *GetDataExtractsEventsParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get data extracts events params
func (o *GetDataExtractsEventsParams) SetToDate(toDate string) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataExtractsEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param eventName
	qrEventName := o.EventName
	qEventName := qrEventName
	if qEventName != "" {
		if err := r.SetQueryParam("eventName", qEventName); err != nil {
			return err
		}
	}

	// query param fromDate
	qrFromDate := o.FromDate
	qFromDate := qrFromDate
	if qFromDate != "" {
		if err := r.SetQueryParam("fromDate", qFromDate); err != nil {
			return err
		}
	}

	// query param toDate
	qrToDate := o.ToDate
	qToDate := qrToDate
	if qToDate != "" {
		if err := r.SetQueryParam("toDate", qToDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
