// Code generated by go-swagger; DO NOT EDIT.

package data_extracts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new data extracts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for data extracts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDataExtractsEvents gets events

The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.<br>Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. To learn more, please refer to the dataExtracts page.<br>The fromDate or the toDate parameters value cannot be less than 7 days. The time difference between these fields cannot be more than 60 minutes.<br>Cobrand session only has to be passed to invoke this service.<br>
*/
func (a *Client) GetDataExtractsEvents(params *GetDataExtractsEventsParams) (*GetDataExtractsEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataExtractsEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataExtractsEvents",
		Method:             "GET",
		PathPattern:        "/dataExtracts/events",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDataExtractsEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataExtractsEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataExtractsEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDataExtractsUserData gets user data

The get user data service is used to get a user's modified data for a particular period of time for accounts, transactions, holdings, and provider account information.<br>Cobrand session only has to be passed to invoke this service. The time difference between fromDate and toDate fields cannot be more than 60 minutes.<br>
*/
func (a *Client) GetDataExtractsUserData(params *GetDataExtractsUserDataParams) (*GetDataExtractsUserDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataExtractsUserDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataExtractsUserData",
		Method:             "GET",
		PathPattern:        "/dataExtracts/userData",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDataExtractsUserDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataExtractsUserDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataExtractsUserData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
