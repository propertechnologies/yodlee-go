// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccessTokensParams creates a new GetAccessTokensParams object
// with the default values initialized.
func NewGetAccessTokensParams() *GetAccessTokensParams {
	var ()
	return &GetAccessTokensParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccessTokensParamsWithTimeout creates a new GetAccessTokensParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccessTokensParamsWithTimeout(timeout time.Duration) *GetAccessTokensParams {
	var ()
	return &GetAccessTokensParams{

		timeout: timeout,
	}
}

// NewGetAccessTokensParamsWithContext creates a new GetAccessTokensParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccessTokensParamsWithContext(ctx context.Context) *GetAccessTokensParams {
	var ()
	return &GetAccessTokensParams{

		Context: ctx,
	}
}

// NewGetAccessTokensParamsWithHTTPClient creates a new GetAccessTokensParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccessTokensParamsWithHTTPClient(client *http.Client) *GetAccessTokensParams {
	var ()
	return &GetAccessTokensParams{
		HTTPClient: client,
	}
}

/*GetAccessTokensParams contains all the parameters to send to the API endpoint
for the get access tokens operation typically these are written to a http.Request
*/
type GetAccessTokensParams struct {

	/*AppIds
	  appIds

	*/
	AppIds string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get access tokens params
func (o *GetAccessTokensParams) WithTimeout(timeout time.Duration) *GetAccessTokensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get access tokens params
func (o *GetAccessTokensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get access tokens params
func (o *GetAccessTokensParams) WithContext(ctx context.Context) *GetAccessTokensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get access tokens params
func (o *GetAccessTokensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get access tokens params
func (o *GetAccessTokensParams) WithHTTPClient(client *http.Client) *GetAccessTokensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get access tokens params
func (o *GetAccessTokensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppIds adds the appIds to the get access tokens params
func (o *GetAccessTokensParams) WithAppIds(appIds string) *GetAccessTokensParams {
	o.SetAppIds(appIds)
	return o
}

// SetAppIds adds the appIds to the get access tokens params
func (o *GetAccessTokensParams) SetAppIds(appIds string) {
	o.AppIds = appIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccessTokensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param appIds
	qrAppIds := o.AppIds
	qAppIds := qrAppIds
	if qAppIds != "" {
		if err := r.SetQueryParam("appIds", qAppIds); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
