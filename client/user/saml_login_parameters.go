// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSamlLoginParams creates a new SamlLoginParams object
// with the default values initialized.
func NewSamlLoginParams() *SamlLoginParams {
	var ()
	return &SamlLoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSamlLoginParamsWithTimeout creates a new SamlLoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSamlLoginParamsWithTimeout(timeout time.Duration) *SamlLoginParams {
	var ()
	return &SamlLoginParams{

		timeout: timeout,
	}
}

// NewSamlLoginParamsWithContext creates a new SamlLoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewSamlLoginParamsWithContext(ctx context.Context) *SamlLoginParams {
	var ()
	return &SamlLoginParams{

		Context: ctx,
	}
}

// NewSamlLoginParamsWithHTTPClient creates a new SamlLoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSamlLoginParamsWithHTTPClient(client *http.Client) *SamlLoginParams {
	var ()
	return &SamlLoginParams{
		HTTPClient: client,
	}
}

/*SamlLoginParams contains all the parameters to send to the API endpoint
for the saml login operation typically these are written to a http.Request
*/
type SamlLoginParams struct {

	/*Issuer
	  issuer

	*/
	Issuer string
	/*SamlResponse
	  samlResponse

	*/
	SamlResponse string
	/*Source
	  source

	*/
	Source string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the saml login params
func (o *SamlLoginParams) WithTimeout(timeout time.Duration) *SamlLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the saml login params
func (o *SamlLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the saml login params
func (o *SamlLoginParams) WithContext(ctx context.Context) *SamlLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the saml login params
func (o *SamlLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the saml login params
func (o *SamlLoginParams) WithHTTPClient(client *http.Client) *SamlLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the saml login params
func (o *SamlLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIssuer adds the issuer to the saml login params
func (o *SamlLoginParams) WithIssuer(issuer string) *SamlLoginParams {
	o.SetIssuer(issuer)
	return o
}

// SetIssuer adds the issuer to the saml login params
func (o *SamlLoginParams) SetIssuer(issuer string) {
	o.Issuer = issuer
}

// WithSamlResponse adds the samlResponse to the saml login params
func (o *SamlLoginParams) WithSamlResponse(samlResponse string) *SamlLoginParams {
	o.SetSamlResponse(samlResponse)
	return o
}

// SetSamlResponse adds the samlResponse to the saml login params
func (o *SamlLoginParams) SetSamlResponse(samlResponse string) {
	o.SamlResponse = samlResponse
}

// WithSource adds the source to the saml login params
func (o *SamlLoginParams) WithSource(source string) *SamlLoginParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the saml login params
func (o *SamlLoginParams) SetSource(source string) {
	o.Source = source
}

// WriteToRequest writes these params to a swagger request
func (o *SamlLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param issuer
	frIssuer := o.Issuer
	fIssuer := frIssuer
	if fIssuer != "" {
		if err := r.SetFormParam("issuer", fIssuer); err != nil {
			return err
		}
	}

	// form param samlResponse
	frSamlResponse := o.SamlResponse
	fSamlResponse := frSamlResponse
	if fSamlResponse != "" {
		if err := r.SetFormParam("samlResponse", fSamlResponse); err != nil {
			return err
		}
	}

	// form param source
	frSource := o.Source
	fSource := frSource
	if fSource != "" {
		if err := r.SetFormParam("source", fSource); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
