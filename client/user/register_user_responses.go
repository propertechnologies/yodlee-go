// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "yodlee-golang-client/models"
)

// RegisterUserReader is a Reader for the RegisterUser structure.
type RegisterUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRegisterUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRegisterUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRegisterUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRegisterUserOK creates a RegisterUserOK with default headers values
func NewRegisterUserOK() *RegisterUserOK {
	return &RegisterUserOK{}
}

/*RegisterUserOK handles this case with default header values.

Login Successful
*/
type RegisterUserOK struct {
	Payload *models.UserResponse
}

func (o *RegisterUserOK) Error() string {
	return fmt.Sprintf("[POST /user/register][%d] registerUserOK  %+v", 200, o.Payload)
}

func (o *RegisterUserOK) GetPayload() *models.UserResponse {
	return o.Payload
}

func (o *RegisterUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserBadRequest creates a RegisterUserBadRequest with default headers values
func NewRegisterUserBadRequest() *RegisterUserBadRequest {
	return &RegisterUserBadRequest{}
}

/*RegisterUserBadRequest handles this case with default header values.

Y800 : Invalid value for loginName<br>Y800 : Invalid value for password<br>Y800 : Invalid value for email<br>Y801 : Invalid length for loginName<br>Y801 : Invalid length for password<br>
*/
type RegisterUserBadRequest struct {
	Payload *models.YodleeError
}

func (o *RegisterUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /user/register][%d] registerUserBadRequest  %+v", 400, o.Payload)
}

func (o *RegisterUserBadRequest) GetPayload() *models.YodleeError {
	return o.Payload
}

func (o *RegisterUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.YodleeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserUnauthorized creates a RegisterUserUnauthorized with default headers values
func NewRegisterUserUnauthorized() *RegisterUserUnauthorized {
	return &RegisterUserUnauthorized{}
}

/*RegisterUserUnauthorized handles this case with default header values.

Unauthorized
*/
type RegisterUserUnauthorized struct {
}

func (o *RegisterUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /user/register][%d] registerUserUnauthorized ", 401)
}

func (o *RegisterUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterUserNotFound creates a RegisterUserNotFound with default headers values
func NewRegisterUserNotFound() *RegisterUserNotFound {
	return &RegisterUserNotFound{}
}

/*RegisterUserNotFound handles this case with default header values.

Not Found
*/
type RegisterUserNotFound struct {
}

func (o *RegisterUserNotFound) Error() string {
	return fmt.Sprintf("[POST /user/register][%d] registerUserNotFound ", 404)
}

func (o *RegisterUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
