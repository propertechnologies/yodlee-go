// Code generated by go-swagger; DO NOT EDIT.

package provider_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new provider accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provider accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteProviderAccount deletes provider account

The delete provider account service is used to delete a provider account <br>from the Yodlee system. This service also deletes the accounts that are created in the <br>Yodlee system for that provider account. This service does not return a response. <br>The HTTP response code is 204 (Success with no content).<br>
*/
func (a *Client) DeleteProviderAccount(params *DeleteProviderAccountParams) (*DeleteProviderAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProviderAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProviderAccount",
		Method:             "DELETE",
		PathPattern:        "/providerAccounts/{providerAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProviderAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProviderAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProviderAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditCredentialsOrRefreshProviderAccount updates account

<b>Credential-based Implementation Notes:</b> <br>The update account API is used to:  &bull; Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests. <br> &bull; Update account credentials when the user has changed the authentication information at the provider site. <br> &bull; Post MFA information for the MFA-enabled provider accounts during add and update accounts. <br> &bull; Retrieve the latest information of all the eligible accounts that belong to the user. <br><br><b>Edit Credentials - Notes: </b> <br> &bull; If credentials have to be updated in the Yodlee system, one of the following should be provided: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#9702; LoginForm <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#9702; Field array <br> &bull; LoginForm or the field array, can be obtained from the GET providerAccounts/{providerAccountId}?include=credentials API response. <br> &bull; The credentials provided by the user should be embedded in the loginForm or field array object before you pass to this API. <br><b>Posting MFA Info - Notes: </b> <br>1. You might receive the MFA request details to be presented to the end user in the GET providerAccounts/{providerAccount} API during polling or through REFRESH webhooks notificaiton. <br>2. After receiving the inputs from your user: <br>&nbsp;&nbsp;&nbsp;&nbsp;a.Embed the MFA information provided by the user in the loginForm or field array object.<br>&nbsp;&nbsp;&nbsp;&nbsp;b.Pass one of the following objects as input to this API:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull; LoginForm<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&bull; Field array<br/><br><b>Points to consider:</b><br>&bull; Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for <br>the dataset will be retrieved. This action is allowed for edit credentials and single provider account refresh flows only. <br>&bull; Encrypt the credentials and MFA information using the public key.<br>&bull; While testing the PKI feature in sandbox environment, encrypt the password credentials and answers to the MFA questions using the encryption tool.<br/><br><b>--------------------------------------------------------------------------------------------------------------------------------</b><br><b>Open Banking (OB)-based Authentication - Notes:</b><br>The update account API is used to:<br>&bull; Retrieve the latest information for accounts from the provider site.<br>&bull; Update the renewed consent for an existing provider account.<br>&bull; Retrieve the latest information for all the eligible accounts that belong to the user.<br/><br>Yodlee recommendations: <br/>&bull; Create the field entity with the authParameters provided in the get provider details API.<br>&bull; Populate the field entity with the values received from the OB site and pass it to this API.<br/><br><b>--------------------------------------------------------------------------------------------------------------------------------</b><br><b>Update All Eligible Accounts - Notes: </b><br>&bull; This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).<br>&bull; This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.<br>&bull; No parameters should be passed to this API to trigger this action.<br>&bull; Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance. <br>&bull; The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.<br/><br><b>--------------------------------------------------------------------------------------------------------------------------------</b><br><b>What follows are common to both OB and credential-based authentication implementations:  </b><br>&bull; Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount. <br>&bull; If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.<br>&bull; A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.<br>&bull; Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.<br>&bull; Updating preferences using this API will trigger refreshes.<br>&bull; Pass linkedProviderAccountId in the input to link a userâ€™s credential-based providerAccount with the OB providerAccount or viceversa. Ensure that the both the providerAccounts belong to the same institution. <br>&bull; The content type has to be passed as application/json for the body parameter.<br>
*/
func (a *Client) EditCredentialsOrRefreshProviderAccount(params *EditCredentialsOrRefreshProviderAccountParams) (*EditCredentialsOrRefreshProviderAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditCredentialsOrRefreshProviderAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editCredentialsOrRefreshProviderAccount",
		Method:             "PUT",
		PathPattern:        "/providerAccounts",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EditCredentialsOrRefreshProviderAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditCredentialsOrRefreshProviderAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editCredentialsOrRefreshProviderAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllProviderAccounts gets provider accounts

The get provider accounts service is used to return all the provider accounts added by the user. <br>This includes the failed and successfully added provider accounts.<br>
*/
func (a *Client) GetAllProviderAccounts(params *GetAllProviderAccountsParams) (*GetAllProviderAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProviderAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllProviderAccounts",
		Method:             "GET",
		PathPattern:        "/providerAccounts",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllProviderAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProviderAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProviderAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProviderAccount gets provider account details

The get provider account details service is used to learn the status of adding accounts and updating accounts.<br>This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.<br>When include=credentials,questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. <br><b>Note:</b> The password and answer fields are not returned in the response.<br>
*/
func (a *Client) GetProviderAccount(params *GetProviderAccountParams) (*GetProviderAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProviderAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProviderAccount",
		Method:             "GET",
		PathPattern:        "/providerAccounts/{providerAccountId}",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProviderAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProviderAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProviderAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProviderAccountProfiles gets user profile details

The get provider accounts profile service is used to return the user profile details that are associated to the provider account. <br>
*/
func (a *Client) GetProviderAccountProfiles(params *GetProviderAccountProfilesParams) (*GetProviderAccountProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProviderAccountProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProviderAccountProfiles",
		Method:             "GET",
		PathPattern:        "/providerAccounts/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProviderAccountProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProviderAccountProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProviderAccountProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LinkProviderAccount adds account

1. The add account service is used to link the user's account with the provider site to the Yodlee system. <br> 2. Providers that need multifactor authentication are also supported by this service.<br> 3. The loginForm or the field array are the objects under the provider object which is <br>obtained from the <a href="https://developer.yodlee.com/apidocs/index.php#!/providers/getSiteDetail">get provider details</a> service response. The credentials provided by the user should be <br>embedded in the loginForm or field array object.<br> <b>Note:</b> If you are testing <a href="https://developer.yodlee.com/KnowledgeBase/How_to_use_PKI">PKI feature</a>, for encrypting the credentials use <a href="https://developer.yodlee.com/apidocs/utility/encrypt.html">encryption utility</a>.<br> 4. Data to be retrieved from the provider site can be passed using datasetName or dataset. If you pass datasetName, all the attributes that are implicitly configured for the dataset will be retrieved. <br> 5. The response includes the Yodlee generated ID (providerAccountId) for the account along with the refresh information.<br> 6. The <a href="https://developer.yodlee.com/apidocs/index.php#!/providerAccounts/getRefreshForProviderAccount">get provider account details</a> service has to be polled continuously till the account addition status is FAILED or PARTIAL_SUCCESS or SUCCESS<br> 7. If the customer has not subscribed to the event notification for accounts that need multifactor authentication (MFA), the get providerAccount service has to be called continuously till the login form (supported types are token, question & answer, and captcha) is returned in the response.<br> 8. The <a href="https://developer.yodlee.com/apidocs/index.php#!/providerAccounts/updateAccount">update account</a> service should be called to post the MFA information to continue adding the account. <br> 9. Refer to the <a href="https://developer.yodlee.com/Yodlee_API/docs/v1_1/API_Flow">add account</a> flow chart for implementation.<br> 10. This API has <a href="https://developer.yodlee.com/Yodlee_API/docs/v1_1/Webhooks">webhooks</a> support. If the customer has subscribed to the REFRESH event notification and invoked this API for adding an account, relevant notifications will be sent to the customer. <br> 11.The add account service is used to link the user's account with the provider site to the Yodlee system. The generated consent id for the provider site, authorization code received in the PUT consent along with the token received needs to be provided in the request.<br> <b>Note:</b> A dataset may depend on another dataset for retrieval, so the response will include the requested datasets and the dependent datasets.<br> It is necessary to check all the dataset additional statuses returned in the response, as the provider account status is drawn from the dataset additional statuses.<br> The content type has to be passed as application/json for the body parameter<br>
*/
func (a *Client) LinkProviderAccount(params *LinkProviderAccountParams) (*LinkProviderAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkProviderAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "linkProviderAccount",
		Method:             "POST",
		PathPattern:        "/providerAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LinkProviderAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkProviderAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkProviderAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePreferences updates preferences

This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.<br>Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.<br>Modified data will not be provided in the dataExtracts/userData endpoint.<br>Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.<br>
*/
func (a *Client) UpdatePreferences(params *UpdatePreferencesParams) (*UpdatePreferencesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePreferencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePreferences",
		Method:             "PUT",
		PathPattern:        "/providerAccounts/{providerAccountId}/preferences",
		ProducesMediaTypes: []string{"application/json;charset=UTF-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePreferencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePreferencesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePreferences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
