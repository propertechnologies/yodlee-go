// Code generated by go-swagger; DO NOT EDIT.

package holdings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetHoldingsParams creates a new GetHoldingsParams object
// with the default values initialized.
func NewGetHoldingsParams() *GetHoldingsParams {
	var ()
	return &GetHoldingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHoldingsParamsWithTimeout creates a new GetHoldingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHoldingsParamsWithTimeout(timeout time.Duration) *GetHoldingsParams {
	var ()
	return &GetHoldingsParams{

		timeout: timeout,
	}
}

// NewGetHoldingsParamsWithContext creates a new GetHoldingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHoldingsParamsWithContext(ctx context.Context) *GetHoldingsParams {
	var ()
	return &GetHoldingsParams{

		Context: ctx,
	}
}

// NewGetHoldingsParamsWithHTTPClient creates a new GetHoldingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHoldingsParamsWithHTTPClient(client *http.Client) *GetHoldingsParams {
	var ()
	return &GetHoldingsParams{
		HTTPClient: client,
	}
}

/*GetHoldingsParams contains all the parameters to send to the API endpoint
for the get holdings operation typically these are written to a http.Request
*/
type GetHoldingsParams struct {

	/*AccountID
	  Comma separated accountId

	*/
	AccountID *string
	/*AssetClassificationClassificationType
	  e.g. Country, Sector, etc.

	*/
	AssetClassificationClassificationType *string
	/*ClassificationValue
	  e.g. US

	*/
	ClassificationValue *string
	/*Include
	  assetClassification

	*/
	Include *string
	/*ProviderAccountID
	  providerAccountId

	*/
	ProviderAccountID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get holdings params
func (o *GetHoldingsParams) WithTimeout(timeout time.Duration) *GetHoldingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get holdings params
func (o *GetHoldingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get holdings params
func (o *GetHoldingsParams) WithContext(ctx context.Context) *GetHoldingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get holdings params
func (o *GetHoldingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get holdings params
func (o *GetHoldingsParams) WithHTTPClient(client *http.Client) *GetHoldingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get holdings params
func (o *GetHoldingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get holdings params
func (o *GetHoldingsParams) WithAccountID(accountID *string) *GetHoldingsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get holdings params
func (o *GetHoldingsParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithAssetClassificationClassificationType adds the assetClassificationClassificationType to the get holdings params
func (o *GetHoldingsParams) WithAssetClassificationClassificationType(assetClassificationClassificationType *string) *GetHoldingsParams {
	o.SetAssetClassificationClassificationType(assetClassificationClassificationType)
	return o
}

// SetAssetClassificationClassificationType adds the assetClassificationClassificationType to the get holdings params
func (o *GetHoldingsParams) SetAssetClassificationClassificationType(assetClassificationClassificationType *string) {
	o.AssetClassificationClassificationType = assetClassificationClassificationType
}

// WithClassificationValue adds the classificationValue to the get holdings params
func (o *GetHoldingsParams) WithClassificationValue(classificationValue *string) *GetHoldingsParams {
	o.SetClassificationValue(classificationValue)
	return o
}

// SetClassificationValue adds the classificationValue to the get holdings params
func (o *GetHoldingsParams) SetClassificationValue(classificationValue *string) {
	o.ClassificationValue = classificationValue
}

// WithInclude adds the include to the get holdings params
func (o *GetHoldingsParams) WithInclude(include *string) *GetHoldingsParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get holdings params
func (o *GetHoldingsParams) SetInclude(include *string) {
	o.Include = include
}

// WithProviderAccountID adds the providerAccountID to the get holdings params
func (o *GetHoldingsParams) WithProviderAccountID(providerAccountID *string) *GetHoldingsParams {
	o.SetProviderAccountID(providerAccountID)
	return o
}

// SetProviderAccountID adds the providerAccountId to the get holdings params
func (o *GetHoldingsParams) SetProviderAccountID(providerAccountID *string) {
	o.ProviderAccountID = providerAccountID
}

// WriteToRequest writes these params to a swagger request
func (o *GetHoldingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.AssetClassificationClassificationType != nil {

		// query param assetClassification.classificationType
		var qrAssetClassificationClassificationType string
		if o.AssetClassificationClassificationType != nil {
			qrAssetClassificationClassificationType = *o.AssetClassificationClassificationType
		}
		qAssetClassificationClassificationType := qrAssetClassificationClassificationType
		if qAssetClassificationClassificationType != "" {
			if err := r.SetQueryParam("assetClassification.classificationType", qAssetClassificationClassificationType); err != nil {
				return err
			}
		}

	}

	if o.ClassificationValue != nil {

		// query param classificationValue
		var qrClassificationValue string
		if o.ClassificationValue != nil {
			qrClassificationValue = *o.ClassificationValue
		}
		qClassificationValue := qrClassificationValue
		if qClassificationValue != "" {
			if err := r.SetQueryParam("classificationValue", qClassificationValue); err != nil {
				return err
			}
		}

	}

	if o.Include != nil {

		// query param include
		var qrInclude string
		if o.Include != nil {
			qrInclude = *o.Include
		}
		qInclude := qrInclude
		if qInclude != "" {
			if err := r.SetQueryParam("include", qInclude); err != nil {
				return err
			}
		}

	}

	if o.ProviderAccountID != nil {

		// query param providerAccountId
		var qrProviderAccountID string
		if o.ProviderAccountID != nil {
			qrProviderAccountID = *o.ProviderAccountID
		}
		qProviderAccountID := qrProviderAccountID
		if qProviderAccountID != "" {
			if err := r.SetQueryParam("providerAccountId", qProviderAccountID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
