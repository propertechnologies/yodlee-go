// Code generated by go-swagger; DO NOT EDIT.

package holdings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new holdings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for holdings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAssetClassificationList gets asset classification list

The get asset classifications list service is used to get the supported asset classifications. <br>The response includes different classification types like assetClass, country, sector, style, etc., <br>and the values corresponding to each type.<br>
*/
func (a *Client) GetAssetClassificationList(params *GetAssetClassificationListParams) (*GetAssetClassificationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssetClassificationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssetClassificationList",
		Method:             "GET",
		PathPattern:        "/holdings/assetClassificationList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAssetClassificationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAssetClassificationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAssetClassificationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHoldingTypeList gets holding type list

The get holding types list service is used to get the supported holding types.<br>The response includes different holding types such as future, moneyMarketFund, stock, etc.<br>and it returns the supported holding types <br>
*/
func (a *Client) GetHoldingTypeList(params *GetHoldingTypeListParams) (*GetHoldingTypeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHoldingTypeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHoldingTypeList",
		Method:             "GET",
		PathPattern:        "/holdings/holdingTypeList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHoldingTypeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHoldingTypeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHoldingTypeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHoldings gets holdings

The get holdings service is used to get the list of holdings of a user.<br>Supported holding types can be employeeStockOption, <br>moneyMarketFund, bond, etc. and is obtained using get holding type list service. <br>Asset classifications for the holdings need to be requested through the "include" parameter.<br>Asset classification information for holdings are not available by default, as it is a premium feature.<br>
*/
func (a *Client) GetHoldings(params *GetHoldingsParams) (*GetHoldingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHoldingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHoldings",
		Method:             "GET",
		PathPattern:        "/holdings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHoldingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHoldingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHoldings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecurities gets security details

The get security details service is used to get all the security information for the holdings<br>
*/
func (a *Client) GetSecurities(params *GetSecuritiesParams) (*GetSecuritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSecurities",
		Method:             "GET",
		PathPattern:        "/holdings/securities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSecuritiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecuritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecurities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
